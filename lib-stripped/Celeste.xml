<?xml version="1.0"?>
<!--

This is a file containing Hand-Written(!) documentation for Celeste and Monocle.

Please DO NOT REMOVE THIS and modify it carefully.

How these should be structured is poorly documented, so if having nested members tags doesn't work for someone, let me know.

-->
<doc>
  <assembly>
    <name>Celeste</name>
  </assembly>
  <!--
  Celeste Docs to be categorized as seen fit.
  -->
  <members name="Celeste">
    <members name="Scenes">
      <members name="Level">
        <member name="P:Celeste.Level.LevelOffset">
          <summary>
            Offset of the world coordinates.
            </summary>
        </member>
        <member name="P:Celeste.Level.Transitioning">
          <summary>
            Whether the level is currently moving to or from another level.
            </summary>
        </member>
        <member name="P:Celeste.Level.FrozenOrPaused">
          <summary>
            Whether the level is Frozen or Paused.
            </summary>
        </member>
        <member name="P:Celeste.Level.CanPause">
          <summary>
            Whether the level is able to be paused.
            </summary>
        </member>
        <member name="M:Celeste.Level.LoadLevel(Celeste.Player.IntroTypes,System.Boolean)">
          <summary>
            Loads the level from the current <see cref="T:Celeste.Session" />.
            </summary>
          <param name="playerIntro">
          </param>
          <param name="isFromLoader">Whether this level was loaded from a <see cref="T:Celeste.LevelLoader" />.</param>
        </member>
        <member name="M:Celeste.Level.UnloadLevel">
          <summary>
            Remove all non-global entities in the level.<br />
            Global entities are those marked with <see cref="F:Celeste.Tags.Global" /></summary>
        </member>
        <member name="M:Celeste.Level.Reload">
          <summary>
            Safely unload, then reload the level.
            </summary>
        </member>
        <member name="M:Celeste.Level.TransitionTo(Celeste.LevelData,Microsoft.Xna.Framework.Vector2)">
          <summary>
            Transition to an adjacent level.
            </summary>
          <param name="next">
          </param>
          <param name="direction">
          </param>
        </member>
        <member name="M:Celeste.Level.UnloadEntities(System.Collections.Generic.List{Monocle.Entity})">
          <summary>
            Remove entities from the level.
            </summary>
          <param name="entities">Entities to remove.</param>
        </member>
        <member name="P:Celeste.Level.DefaultSpawnPoint">
          <summary>
            Get the spawn point closest to the bottom left of the level.
            </summary>
        </member>
        <member name="M:Celeste.Level.GetSpawnPoint(Microsoft.Xna.Framework.Vector2)">
          <summary>
            Get the closest spawn point to a point.
            </summary>
          <param name="from">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.GetFullCameraTargetAt(Celeste.Player,Microsoft.Xna.Framework.Vector2)">
          <summary>
            Get the camera target if the player were at a specified point.
            </summary>
          <param name="player">
          </param>
          <param name="at">
          </param>
          <returns>
          </returns>
        </member>
        <member name="P:Celeste.Level.Bounds">
          <summary>
            The bounds of the level.
            </summary>
        </member>
        <member name="P:Celeste.Level.PreviousBounds">
          <summary>
            The bounds of the previous level.
            </summary>
        </member>
        <member name="M:Celeste.Level.TeleportTo(Celeste.Player,System.String,Celeste.Player.IntroTypes,System.Nullable{Microsoft.Xna.Framework.Vector2})">
          <summary>
            Teleport a player to a level.
            </summary>
          <param name="player">
          </param>
          <param name="nextLevel">The name of a level in the current map.</param>
          <param name="introType">
          </param>
          <param name="nearestSpawn">If set, the spawnpoint nearest to this point will be used.</param>
        </member>
        <member name="M:Celeste.Level.AutoSave">
          <summary>
            Save the game.
            </summary>
        </member>
        <member name="M:Celeste.Level.IsAutoSaving">
          <summary>
            Whether the game is currently saving.
            </summary>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.Pause(System.Int32,System.Boolean,System.Boolean)">
          <summary>
            Open the pause menu.
            </summary>
          <param name="startIndex">The menu item index to select.</param>
          <param name="minimal">Whether to show only some options.</param>
          <param name="quickReset">Wether to open the quick reset menu.</param>
        </member>
        <member name="M:Celeste.Level.SnapColorGrade(System.String)">
          <summary>
            Set the color grade.<br />
            See: <seealso cref="F:Celeste.GFX.ColorGrades" /></summary>
          <param name="next">The name of the colorgrade.</param>
        </member>
        <member name="M:Celeste.Level.NextColorGrade(System.String,System.Single)">
          <summary>
            Gradually change the color grade.<br />
            See: <seealso cref="F:Celeste.GFX.ColorGrades" /></summary>
          <param name="next">The name of the colorgrade.</param>
          <param name="speed">How quickly to fade.</param>
        </member>
        <member name="M:Celeste.Level.Shake(System.Single)">
          <summary>
            Shake the screen.
            </summary>
          <param name="time">Shake duration.</param>
        </member>
        <member name="M:Celeste.Level.StopShake">
          <summary>
            Stop the screen shake.
            </summary>
        </member>
        <member name="M:Celeste.Level.DirectionalShake(Microsoft.Xna.Framework.Vector2,System.Single)">
          <summary>
            Shake the screen in a specific direction.
            </summary>
          <param name="dir">Direction to shake the screen towards.</param>
          <param name="time">Shake duration.</param>
        </member>
        <member name="M:Celeste.Level.Flash(Microsoft.Xna.Framework.Color,System.Boolean)">
          <summary>
            Flash the screen a solid color.
            </summary>
          <param name="color">
          </param>
          <param name="drawPlayerOver">Whether the player should render over the flash.</param>
        </member>
        <member name="M:Celeste.Level.ZoomSnap(Microsoft.Xna.Framework.Vector2,System.Single)">
          <summary>
            Set the zoom multiplier and focus point.
            </summary>
          <param name="screenSpaceFocusPoint">
          </param>
          <param name="zoom">Zoom multiplier.</param>
        </member>
        <member name="M:Celeste.Level.ZoomTo(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
          <summary>
            Zoom to a point on screen over time.
            </summary>
          <param name="screenSpaceFocusPoint">
          </param>
          <param name="zoom">Zoom multiplier.</param>
          <param name="duration">Zoom duration.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.ZoomAcross(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
          <summary>
            Zoom from the current focus point to another point on screen over time.
            </summary>
          <param name="screenSpaceFocusPoint">
          </param>
          <param name="zoom">Zoom multiplier.</param>
          <param name="duration">Zoom duration.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.ZoomBack(System.Single)">
          <summary>
            Gradually reset the camera zoom.
            </summary>
          <param name="duration">Zoom duration.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.ResetZoom">
          <summary>
            Reset the camera zoom.
            </summary>
        </member>
        <member name="M:Celeste.Level.DoScreenWipe(System.Boolean,System.Action,System.Boolean)">
          <summary>
            Activate the area-specific <see cref="T:Celeste.ScreenWipe" />.<br /><seealso cref="F:Celeste.AreaData.Wipe">See Also.</seealso></summary>
          <param name="wipeIn">Wipe direction.</param>
          <param name="onComplete">
          </param>
          <param name="hiresSnow">
          </param>
        </member>
        <member name="P:Celeste.Level.CoreMode">
          <summary>
            When changed, updates any <see cref="T:Celeste.CoreModeListener" /> components.
            </summary>
        </member>
        <member name="M:Celeste.Level.InsideCamera(Microsoft.Xna.Framework.Vector2,System.Single)">
          <summary>
            Check whether a point is within the camera view.
            </summary>
          <param name="position">
          </param>
          <param name="expand">Padding beyond the camera bounds.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.EnforceBounds(Celeste.Player)">
          <summary>
            Enforce the bounds of the level on the player, transitioning to the next level if possible.
            </summary>
          <param name="player">
          </param>
        </member>
        <member name="M:Celeste.Level.IsInBounds(Monocle.Entity)">
          <summary>
            Check whether an entity is fully contained within the level's bounds.
            </summary>
          <param name="entity">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.IsInBounds(Microsoft.Xna.Framework.Vector2)">
          <summary>
            Check whether a point is within the level's bounds.
            </summary>
          <param name="position">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.IsInBounds(Microsoft.Xna.Framework.Vector2,System.Single)">
          <summary>
            Check whether a point is within the level's bounds.
            </summary>
          <param name="position">
          </param>
          <param name="pad">Padding beyond the level bounds.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.IsInBounds(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
          <summary>
            Check whether a point is within the level's bounds.
            </summary>
          <param name="position">
          </param>
          <param name="dirPad">Padding beyond the level bounds.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.IsInCamera(Microsoft.Xna.Framework.Vector2,System.Single)">
          <summary>
            Check whether a point is within the camera view.
            </summary>
          <param name="position">
          </param>
          <param name="pad">Padding beyond the camera bounds.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Level.StartCutscene(System.Action{Celeste.Level},System.Boolean,System.Boolean,System.Boolean)">
          <summary>
            Mark the level as being in a cutscene.
            </summary>
          <param name="onSkip">Action to perform if the cutscene is skipped.</param>
          <param name="fadeInOnSkip">Whether to play a <see cref="T:Celeste.FadeWipe" /> if the cutscene is skipped.</param>
          <param name="endingChapterAfterCutscene">Whether to end the chapter after the cutscene ends.</param>
          <param name="resetZoomOnSkip">Whether the zoom value should be reset if skipped.</param>
        </member>
        <member name="M:Celeste.Level.CancelCutscene">
          <summary>
            End the current cutscene without skipping.
            </summary>
        </member>
        <member name="M:Celeste.Level.SkipCutscene">
          <summary>
            Skip the current cutscene, cleaning up as necessary.
            </summary>
        </member>
        <member name="M:Celeste.Level.EndCutscene">
          <summary>
            End the current cutscene if it is not already being skipped.
            </summary>
        </member>
        <member name="M:Celeste.Level.RegisterAreaComplete">
          <summary>
            Register the current area as complete and collect all strawberries.
            </summary>
        </member>
        <member name="M:Celeste.Level.CompleteArea(System.Boolean,System.Boolean,System.Boolean)">
          <summary>
            Complete the current area and return to the menu.
            </summary>
          <param name="spotlightWipe">Whether to use a <see cref="T:Celeste.SpotlightWipe" /> instead of a <see cref="T:Celeste.FadeWipe" />.</param>
          <param name="skipScreenWipe">Whether to forego the screenwipe altogether.</param>
          <param name="skipCompleteScreen">Whether to not show the chapter complete screen.</param>
          <returns>
          </returns>
        </member>
      </members>
    </members>
    <members name="Entities">
      <members name="EntityData">
        <member name="T:Celeste.EntityData">
          <summary>
            Holds information about a specific <see cref="T:Monocle.Entity" />.
            </summary>
        </member>
        <member name="M:Celeste.EntityData.NodesOffset(Microsoft.Xna.Framework.Vector2)">
          <summary>
            Get this entity's nodes with an offset.
            </summary>
          <param name="offset">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.NodesWithPosition(Microsoft.Xna.Framework.Vector2)">
          <summary>
            Get this entity's nodes, beginning with the entity's position, with an offset.
            </summary>
          <param name="offset">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Has(System.String)">
          <summary>
            Check whether the supplied key exists.
            </summary>
          <param name="key">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Attr(System.String,System.String)">
          <summary>
            Get the <see cref="T:System.String" /> value associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Float(System.String,System.Single)">
          <summary>
            Get the <see cref="T:System.Single" /> value associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Bool(System.String,System.Boolean)">
          <summary>
            Get the <see cref="T:System.Boolean" /> value associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Int(System.String,System.Int32)">
          <summary>
            Get the <see cref="T:System.Int32" /> value associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Char(System.String,System.Char)">
          <summary>
            Get the <see cref="T:System.Char" /> value associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.FirstNodeNullable(System.Nullable{Microsoft.Xna.Framework.Vector2})">
          <summary>
            Get the first <see cref="F:Celeste.EntityData.Nodes">Node</see> as a nullable <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
          <param name="offset">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.Enum``1(System.String,``0)">
          <summary>
            Get the <see cref="T:System.Enum" /> value of type <typeparamref name="T" /> associated with a key.
            </summary>
          <typeparam name="T">The <see cref="M:Celeste.EntityData.Enum``1(System.String,``0)" /> type.</typeparam>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.EntityData.HexColor(System.String,Microsoft.Xna.Framework.Color)">
          <summary>
            Get the <see cref="T:Microsoft.Xna.Framework.Color" /> from the hexadecimal string associated with a key.
            </summary>
          <param name="key">
          </param>
          <param name="defaultValue">
          </param>
          <returns>
          </returns>
        </member>
        <member name="F:Celeste.EntityData.ID">
          <summary>
            A semi-unique id for this entity.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Name">
          <summary>
            The name associated with this entity.<br />
            Usually set by a <see cref="T:Celeste.Mod.Entities.CustomEntityAttribute" />.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Level">
          <summary>
            The level this entity will be added to.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Position">
          <summary>
            Position of the entity within the level.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Origin">
          <summary>
            <see cref="T:Microsoft.Xna.Framework.Vector2" /> generated from the "<c>originX</c>" and "<c>originY</c>" attributes.<br />
            (Unused in vanilla Celeste)
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Width">
          <summary>
            Width of the entity.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Height">
          <summary>
            Height of the entity.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Nodes">
          <summary>
            Node placements for this entity.
            </summary>
        </member>
        <member name="F:Celeste.EntityData.Values">
          <summary>
            Attributes for this entity.
            </summary>
        </member>
      </members>
      <members name="EntityID">
        <member name="T:Celeste.EntityID">
          <summary>
            A semi-unique id consisting of the level name and entity id (<see cref="T:System.Int32" />).
            </summary>
        </member>
      </members>
      <members name="CutsceneEntity">
        <member name="T:Celeste.CutsceneEntity">
          <summary>
            An <see cref="T:Monocle.Entity" /> that runs a cutscene when added.<br />
            Apply a <see cref="T:Celeste.Mod.Entities.CustomEventAttribute" /> to load this entity using an <see cref="T:Celeste.EventTrigger" />.<br /><seealso href="https://github.com/EverestAPI/Resources/wiki/Creating-Custom-Events#CutsceneEntity">Read More.</seealso></summary>
        </member>
        <member name="P:Celeste.CutsceneEntity.Running">
          <summary>
            Whether this cutscene is currently active.
          </summary>
        </member>
        <member name="P:Celeste.CutsceneEntity.FadeInOnSkip">
          <summary>
            Whether to play a <see cref="T:Celeste.FadeWipe" /> if the cutscene is skipped.
          </summary>
        </member>
        <member name="M:Celeste.CutsceneEntity.#ctor(System.Boolean,System.Boolean)">
          <summary>
            Create a new CutsceneEntity.
          </summary>
          <param name="fadeInOnSkip">
            Whether to play a <see cref="T:Celeste.FadeWipe" /> if the cutscene is skipped.
          </param>
          <param name="endingChapterAfter">
            Whether the chapter will be completed after this cutscene.<br />
            The CutsceneEntity is still responsible for handling the chapter ending.
          </param>
        </member>
        <member name="M:Celeste.CutsceneEntity.Added(Monocle.Scene)">
          <inheritdoc />
        </member>
        <member name="M:Celeste.CutsceneEntity.Start">
          <summary>
            Start this cutscene.
          </summary>
        </member>
        <member name="M:Celeste.CutsceneEntity.Update">
          <inheritdoc />
        </member>
        <member name="M:Celeste.CutsceneEntity.EndCutscene(Celeste.Level,System.Boolean)">
          <summary>
            Mark the completion of the cutscene.<br />
            Should be called at the end of the main <see cref="T:Monocle.Coroutine" />.
          </summary>
          <param name="level">
            The current <see cref="T:Celeste.Level" />.
          </param>
          <param name="removeSelf">Whether this entity should be removed.</param>
        </member>
        <member name="M:Celeste.CutsceneEntity.OnBegin(Celeste.Level)">
          <summary>
            Set up the cutscene, usually to add a new <see cref="T:Monocle.Coroutine" /> to execute the cutscene within.
          </summary>
          <param name="level">
            The current <see cref="T:Celeste.Level" />.
          </param>
        </member>
        <member name="M:Celeste.CutsceneEntity.OnEnd(Celeste.Level)">
          <summary>
            Clean up after the coroutine has finished.<br />
            If necessary, <see cref="F:Celeste.CutsceneEntity.WasSkipped" /> should be checked in case the cutscene was ended prematurely.
          </summary>
          <param name="level">
            The current <see cref="T:Celeste.Level" />.
          </param>
        </member>
        <member name="M:Celeste.CutsceneEntity.CameraTo(Microsoft.Xna.Framework.Vector2,System.Single,Monocle.Ease.Easer,System.Single)">
          <summary>
            Ease the level's <see cref="T:Monocle.Camera" /> towards a point.
          </summary>
          <param name="target">The point to move the camera to.</param>
          <param name="duration">Duration of the ease.</param>
          <param name="ease">
            Type of ease (Default: <see cref="F:Monocle.Ease.CubeInOut" />)
          </param>
          <param name="delay">Delay before beginning the ease.</param>
          <returns>
          </returns>
        </member>
        <member name="F:Celeste.CutsceneEntity.WasSkipped">
          <summary>
            Whether the cutscene was ended before completion.
          </summary>
        </member>
        <member name="F:Celeste.CutsceneEntity.RemoveOnSkipped">
          <summary>
            Whether this CutsceneEntity should be removed if skipped.
          </summary>
        </member>
        <member name="F:Celeste.CutsceneEntity.EndingChapterAfter">
          <summary>
            Whether the chapter will be completed after this cutscene.<br />
            The CutsceneEntity is still responsible for handling the chapter ending.
          </summary>
        </member>
        <member name="F:Celeste.CutsceneEntity.Level">
          <summary>
            The <see cref="T:Celeste.Level" /> this CutsceneEntity was added to.
          </summary>
        </member>
      </members>
      <members name="CutsceneNode">
        <member name="T:Celeste.CutsceneNode">
          <summary>
            A named point in a Level.<br />
            Can be retrived using <see cref="M:Celeste.CutsceneNode.Find(System.String)" />.<br /><seealso href="https://github.com/EverestAPI/Resources/wiki/Creating-Custom-Events#cutscenenode">Read More.</seealso></summary>
        </member>
        <member name="M:Celeste.CutsceneNode.#ctor(Celeste.EntityData,Microsoft.Xna.Framework.Vector2)">
          <summary>
            Create a new CutsceneNode entity.<br /><para>
              Checks the following <see cref="T:Celeste.EntityData" /> attributes:<br />
              - <see cref="T:System.String" /><c>nodeName</c> (default: "")
            </para></summary>
          <param name="data">
            Checks the following attributes:<br />
            - <see cref="T:System.String" /><c>nodeName</c> (default: "")
          </param>
          <param name="offset">
          </param>
        </member>
        <member name="M:Celeste.CutsceneNode.Find(System.String)">
          <summary>
            Find a <see cref="T:Celeste.CutsceneNode" /> in the current <see cref="T:Monocle.Scene" />.
          </summary>
          <param name="name">The name of the node.</param>
          <returns>
          </returns>
        </member>
        <member name="F:Celeste.CutsceneNode.Name">
          <summary>
            The name of this node.
          </summary>
        </member>
      </members>
    </members>
    <members name="Triggers">
      <members name="Trigger">
        <member name="T:Celeste.Trigger">
          <summary>
            An invisible entity that performs an action when the player enters or exits.
            </summary>
        </member>
        <member name="P:Celeste.Trigger.PlayerIsInside">
          <summary>
            Whether the player is currently inside the trigger bounds.
            </summary>
        </member>
        <member name="M:Celeste.Trigger.OnEnter(Celeste.Player)">
          <summary>
            Called when the player first enters the trigger.
            </summary>
          <param name="player">
          </param>
        </member>
        <member name="M:Celeste.Trigger.OnStay(Celeste.Player)">
          <summary>
            Called every frame the player remains in the trigger.
            </summary>
          <param name="player">
          </param>
        </member>
        <member name="M:Celeste.Trigger.OnLeave(Celeste.Player)">
          <summary>
            Called when the player leaves the trigger.
            </summary>
          <param name="player">
          </param>
        </member>
        <member name="M:Celeste.Trigger.GetPositionLerp(Celeste.Player,Celeste.Trigger.PositionModes)">
          <summary>
            Get the player's position within the trigger as a range from 0-1.
            </summary>
          <param name="player">
          </param>
          <param name="mode">The mode used to calculate the lerp.</param>
          <returns>
          </returns>
        </member>
        <member name="T:Celeste.Trigger.PositionModes">
          <summary>
            How the position lerp should be calculated.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.NoEffect">
          <summary>
            Returns 1f.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.HorizontalCenter">
          <summary>
            How close the player is to the center of the trigger, on the X axis.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.VerticalCenter">
          <summary>
            How close the player is to the center of the trigger, on the Y axis.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.TopToBottom">
          <summary>
            Lerp from top to bottom of the trigger.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.BottomToTop">
          <summary>
            Lerp from bottom to top of the trigger.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.LeftToRight">
          <summary>
            Lerp from left to right of the trigger.
            </summary>
        </member>
        <member name="F:Celeste.Trigger.PositionModes.RightToLeft">
          <summary>
            Lerp from right to left of the trigger.
            </summary>
        </member>
      </members>
    </members>
    <members name="Components">
      <members name="Listeners">
        <members name="CoreModeListener">
          <member name="T:Celeste.CoreModeListener">
            <summary>
              A <see cref="T:Monocle.Component" /> that performs an action when <see cref="P:Celeste.Level.CoreMode" /> is changed.
              </summary>
          </member>
          <member name="M:Celeste.CoreModeListener.#ctor(System.Action{Celeste.Session.CoreModes})">
            <summary>
              Create a new <see cref="T:Celeste.CoreModeListener" />.
              </summary>
            <param name="onChange">Invoked when <see cref="P:Celeste.Level.CoreMode" /> is changed.</param>
          </member>
          <member name="F:Celeste.CoreModeListener.OnChange">
            <summary>
              Invoked when <see cref="P:Celeste.Level.CoreMode" /> is changed.
              </summary>
          </member>
        </members>
        <members name="DashListener">
          <member name="T:Celeste.DashListener">
            <summary>
              A <see cref="T:Monocle.Component" /> that performs an action when the <see cref="T:Celeste.Player" /> dashes.
              </summary>
          </member>
          <member name="M:Celeste.DashListener.#ctor">
            <summary>
              Create a new <see cref="T:Celeste.DashListener" />.
              </summary>
          </member>
          <member name="F:Celeste.DashListener.OnDash">
            <summary>
              Invoked when the <see cref="T:Celeste.Player" /> dashes.
              </summary>
          </member>
          <member name="F:Celeste.DashListener.OnSet">
            <summary>
              Unused in vanilla Celeste.
              </summary>
          </member>
        </members>
        <members name="TransitionListener">
          <member name="T:Celeste.TransitionListener">
            <summary>
              A <see cref="T:Monocle.Component" /> that performs actions while transitioning between <see cref="T:Celeste.Level" />s.
              </summary>
          </member>
          <member name="M:Celeste.TransitionListener.#ctor">
            <summary>
              Create a new <see cref="T:Celeste.TransitionListener" />.
              </summary>
          </member>
          <member name="F:Celeste.TransitionListener.OnInBegin">
            <summary>
              Invoked at the start of a transition into the <see cref="T:Celeste.Level" /> containing this component.
              </summary>
          </member>
          <member name="F:Celeste.TransitionListener.OnInEnd">
            <summary>
              Invoked at the end of a transition into the <see cref="T:Celeste.Level" /> containing this component.
              </summary>
          </member>
          <member name="F:Celeste.TransitionListener.OnIn">
            <summary>
              Invoked every frame while transitioning into the <see cref="T:Celeste.Level" /> containing this component.<br />
              Accepts as parameter the progress of the transition from <c>0-1</c>.
              </summary>
          </member>
          <member name="F:Celeste.TransitionListener.OnOutBegin">
            <summary>
              Invoked at the start of a transition out of the <see cref="T:Celeste.Level" /> containing this component.
              </summary>
          </member>
          <member name="F:Celeste.TransitionListener.OnOut">
            <summary>
              Invoked every frame while transitioning out of the <see cref="T:Celeste.Level" /> containing this component.<br />
              Accepts as parameter the progress of the transition from <c>0-1</c>.
              </summary>
          </member>
        </members>
      </members>
      <members name="WaterInteraction">
        <member name="T:Celeste.WaterInteraction">
          <summary>
            A <see cref="T:Monocle.Component" /> that allows <see cref="T:Celeste.Water" /> to interact visually with an entity.
            </summary>
        </member>
        <member name="M:Celeste.WaterInteraction.#ctor(System.Func{System.Boolean})">
          <summary>
            Creates a new <see cref="T:Celeste.WaterInteraction" />.
            </summary>
          <param name="isDashing">Used to determine the force of impact against the <see cref="T:Celeste.Water" />.</param>
        </member>
        <member name="F:Celeste.WaterInteraction.IsDashing">
          <summary>
            Determines the force of impact against the <see cref="T:Celeste.Water" />.
            </summary>
        </member>
        <member name="F:Celeste.WaterInteraction.DrippingOffset">
          <summary>
            Vertical offset for drip particles.
            </summary>
        </member>
      </members>
    </members>
    <members name="Dialogue">
      <members name="Dialog">
        <member name="T:Celeste.Dialog">
          <summary>
              Provides static methods for retrieving non-language-secific dialog.
            </summary>
        </member>
        <member name="M:Celeste.Dialog.Has(System.String,Celeste.Language)">
          <summary>
              Check whether the supplied ID has an associated value.
            </summary>
          <param name="name">The dialog ID</param>
          <param name="language">The language to check (Defaults to <see cref="F:Celeste.Dialog.Language" />)</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Dialog.Get(System.String,Celeste.Language)">
          <summary>
              Get the dialog associated with the supplied ID.<br />
              Includes metadata (<c>[]</c> and <c>{}</c>).
            </summary>
          <param name="name">The dialog ID</param>
          <param name="language">The language to check (Defaults to <see cref="F:Celeste.Dialog.Language" />)</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Dialog.Clean(System.String,Celeste.Language)">
          <summary>
              Get the cleaned dialog associated with the supplied ID.<br />
              Does not include metadata (<c>[]</c> and <c>{}</c>).
            </summary>
          <param name="name">The dialog ID</param>
          <param name="language">The language to check (Defaults to <see cref="F:Celeste.Dialog.Language" />)</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Dialog.Time(System.Int64)">
          <summary>
              Parse a time in ticks, and return a formatted time string.
            </summary>
          <param name="ticks">Time in ticks.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Dialog.FileTime(System.Int64)">
          <summary>
              Parse a time in ticks, and return a formatted time string.<br />
              Intended for longer time spans.
            </summary>
          <param name="ticks">Time in ticks.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Dialog.Deaths(System.Int32)">
          <summary>
              Returns a formatted string for displaying a death count.
            </summary>
          <param name="deaths">Number of deaths.</param>
          <returns>
          </returns>
        </member>
        <member name="F:Celeste.Dialog.Language">
          <summary>
              The currently selected language.
            </summary>
        </member>
        <member name="F:Celeste.Dialog.Languages">
          <summary>
              All loaded languages, accessed by id.
            </summary>
        </member>
        <member name="F:Celeste.Dialog.OrderedLanguages">
          <summary>
              List of all loaded languages, ordered by id.
            </summary>
        </member>
      </members>
    </members>
    <members name="UI">
      <members name="ButtonUI">
        <member name="T:Celeste.ButtonUI">
          <summary>
            Static methods for drawing Button labels.
            </summary>
        </member>
        <member name="M:Celeste.ButtonUI.Width(System.String,Monocle.VirtualButton)">
          <summary>
            Get the total rendered width of a label and button icon.
            </summary>
          <param name="label">Displayed text.</param>
          <param name="button">Displayed button.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.ButtonUI.Render(Microsoft.Xna.Framework.Vector2,System.String,Monocle.VirtualButton,System.Single,System.Single,System.Single,System.Single)">
          <summary>
            Draw text and a button icon on screen.<br />
            Button icon retrieved using <see cref="M:Celeste.Input.GuiButton(Monocle.VirtualButton,System.String)" />.
            </summary>
          <param name="position">Position on screen.</param>
          <param name="label">Displayed text.</param>
          <param name="button">Diaplayed button.</param>
          <param name="scale">
          </param>
          <param name="justifyX">
          </param>
          <param name="wiggle">
          </param>
          <param name="alpha">
          </param>
        </member>
      </members>
      <members name="Oui">
        <member name="T:Celeste.Oui">
          <summary>
            An entity representing a screen in the <see cref="T:Celeste.Overworld" />.
            <br /><br />
            Oui components must be added and removed in <see cref="M:Celeste.Oui.Enter(Celeste.Oui)" /> and <see cref="M:Celeste.Oui.Leave(Celeste.Oui)" />.<br />
            A parameter-less constructor is required.
          </summary>
        </member>
        <member name="P:Celeste.Oui.Overworld">
          <summary>
            The current Overworld.
          </summary>
        </member>
        <member name="P:Celeste.Oui.Selected">
          <summary>
            Whether this is the current Oui.
          </summary>
        </member>
        <member name="M:Celeste.Oui.IsStart(Celeste.Overworld,Celeste.Overworld.StartMode)">
          <summary>
            Whether this Oui should be the initial one based on the <see cref="T:Celeste.Overworld.StartMode" />.
          </summary>
          <param name="overworld">The current Overworld.</param>
          <param name="start">
            The current <see cref="T:Celeste.Overworld.StartMode" />.
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Oui.Enter(Celeste.Oui)">
          <summary>
            Called when entering this Oui using <see cref="M:Celeste.Overworld.Goto``1" />.<br />
            Entities and Components should be added to the <see cref="P:Celeste.Oui.Overworld" /> here.
          </summary>
          <param name="from">
            The previous <see cref="T:Celeste.Oui" />.
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.Oui.Leave(Celeste.Oui)">
          <summary>
            Called when leaving this Oui using <see cref="M:Celeste.Overworld.Goto``1" />.<br />
            Entities and Components should be removed from the <see cref="P:Celeste.Oui.Overworld" /> here.
          </summary>
          <param name="from">
            The next <see cref="T:Celeste.Oui" />.
          </param>
          <returns>
          </returns>
        </member>
        <member name="F:Celeste.Oui.Focused">
          <summary>
            Should be set manually in <see cref="M:Celeste.Oui.Enter(Celeste.Oui)" /> and <see cref="M:Celeste.Oui.Leave(Celeste.Oui)" />.
          </summary>
        </member>
      </members>
      <members name="TextMenu">
        <member name="T:Celeste.TextMenu">
          <summary>
            A UI container for a traversable list of <see cref="T:Celeste.TextMenu.Item" />s.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.Current">
          <summary>
            The selected <see cref="T:Celeste.TextMenu.Item" />.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.Width">
          <summary>
            Total width of the menu.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.Height">
          <summary>
            Total height of the menu.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.LeftColumnWidth">
          <summary>
            Width of the left column of the menu.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.RightColumnWidth">
          <summary>
            Width of the right column of the menu.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.FirstPossibleSelection">
          <summary>
            Index of the first selectable item in the menu.
            </summary>
        </member>
        <member name="P:Celeste.TextMenu.LastPossibleSelection">
          <summary>
            Index of the last selectable item in the menu.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.#ctor">
          <summary>
            Create an empty TextMenu.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.Added(Monocle.Scene)">
          <inheritdoc />
        </member>
        <member name="M:Celeste.TextMenu.Add(Celeste.TextMenu.Item)">
          <summary>
            Add an <see cref="T:Celeste.TextMenu.Item" /> to this Menu.
            </summary>
          <param name="item">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.TextMenu.Clear">
          <summary>
            Remove all <see cref="T:Celeste.TextMenu.Item">Items</see> from the menu.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.IndexOf(Celeste.TextMenu.Item)">
          <summary>
            Get the index of an <see cref="T:Celeste.TextMenu.Item" /> in the menu.
            </summary>
          <param name="item">An <see cref="T:Celeste.TextMenu.Item" /> contained in this menu.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.TextMenu.FirstSelection">
          <summary>
            Set the selection to the first possible <see cref="T:Celeste.TextMenu.Item" />.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.MoveSelection(System.Int32,System.Boolean)">
          <summary>
            Move the selection to the next possible item.
            </summary>
          <param name="direction">
            The direction of movement.<br />
            (Down is positive)
            </param>
          <param name="wiggle">
          </param>
        </member>
        <member name="M:Celeste.TextMenu.RecalculateSize">
          <summary>
            Recalculate the necessary width and height to hold all Items.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.GetYOffsetOf(Celeste.TextMenu.Item)">
          <summary>
            Get the Y position of an <see cref="T:Celeste.TextMenu.Item" /> relative to the menu position.
            </summary>
          <param name="item">An <see cref="T:Celeste.TextMenu.Item" /> contained in this menu.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.TextMenu.Close">
          <summary>
            Close and remove this <see cref="T:Celeste.TextMenu" />.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.CloseAndRun(System.Collections.IEnumerator,System.Action)">
          <summary>
            Run <paramref name="routine" />, then perform <paramref name="onClose" />, then close and remove this <see cref="T:Celeste.TextMenu" />.
            </summary>
          <param name="routine">A coroutine to run before closing.</param>
          <param name="onClose">An action to perform before closing.</param>
        </member>
        <member name="M:Celeste.TextMenu.Update">
          <inheritdoc />
        </member>
        <member name="P:Celeste.TextMenu.ScrollTargetY">
          <summary>
            Target Y position for the menu to keep the current item on screen.
            </summary>
        </member>
        <member name="M:Celeste.TextMenu.Render">
          <inheritdoc />
        </member>
        <member name="F:Celeste.TextMenu.Focused">
          <summary>
            Whether the TextMenu is focused, and should accept inputs.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.InnerContent">
          <summary>
            Whether the items should be displayed in one or two columns.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.Selection">
          <summary>
            The current selection index.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.ItemSpacing">
          <summary>
            Spacing between <see cref="T:Celeste.TextMenu.Item" />s.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.MinWidth">
          <summary>
            The minimum width that this menu will occupy.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.Alpha">
          <summary>
            Alpha value of the items in this menu.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.HighlightColor">
          <summary>
            Current color of the selected <see cref="T:Celeste.TextMenu.Item" /></summary>
        </member>
        <member name="F:Celeste.TextMenu.OnESC">
          <summary>
            Invoked when <see cref="F:Celeste.Input.ESC" /> is pressed.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.OnCancel">
          <summary>
            Invoked when <see cref="F:Celeste.Input.MenuCancel" /> is pressed.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.OnUpdate">
          <summary>
            Invoked when this menu is updated.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.OnPause">
          <summary>
            Invoked when <see cref="F:Celeste.Input.Pause" /> is pressed.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.OnClose">
          <summary>
            Invoked when this menu is closed.
            </summary>
        </member>
        <member name="F:Celeste.TextMenu.AutoScroll">
          <summary>
            Whether the menu should scroll to keep the selected item on screen.
            </summary>
        </member>
        <member name="T:Celeste.TextMenu.InnerContentMode">
          <summary>
            How the items in a TextMenu should be displayed.
            </summary>
        </member>
        <members name="Item">
          <member name="T:Celeste.TextMenu.Item">
            <summary>
              Abstract parent class for all TextMenu items.
              </summary>
          </member>
          <member name="P:Celeste.TextMenu.Item.Hoverable">
            <summary>
              Whether this item can be selected.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.Enter(System.Action)">
            <summary>
              Set the action that will be performed when this item is selected.
              </summary>
            <param name="onEnter">
            </param>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Item.Leave(System.Action)">
            <summary>
              Set the action that will be performed when this item is unselected.
              </summary>
            <param name="onEnter">
            </param>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Item.Pressed(System.Action)">
            <summary>
              Set the action that will be performed when <see cref="F:Celeste.Input.MenuConfirm" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.AltPressed(System.Action)">
            <summary>
              Set the action that will be performed when <see cref="F:Celeste.Input.MenuJournal" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="P:Celeste.TextMenu.Item.Width">
            <summary>
              The total width of this item.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.ConfirmPressed">
            <summary>
              Called when <see cref="F:Celeste.Input.MenuConfirm" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.LeftPressed">
            <summary>
              Called when <see cref="F:Celeste.Input.MenuLeft" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.RightPressed">
            <summary>
              Called when <see cref="F:Celeste.Input.MenuRight" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.Added">
            <summary>
              Called when this item is added to a <see cref="T:Celeste.TextMenu" />.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.Update">
            <summary>
              Update the item.
            </summary>
          </member>
          <member name="M:Celeste.TextMenu.Item.LeftWidth">
            <summary>
              The width of the left portion of this item.
              </summary>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Item.RightWidth">
            <summary>
              The width of the right portion of this item.
              </summary>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Item.Height">
            <summary>
              The height of this item.
              </summary>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Item.Render(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
              Draw the item.
            </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.Selectable">
            <summary>
              Whether this is an item that can be selected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.Visible">
            <summary>
              Whether this item should be visible in the menu.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.Disabled">
            <summary>
              Whether this item's selection should be disabled.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.IncludeWidthInMeasurement">
            <summary>
              Whether the width of this item should be included when calculating the width of its <see cref="T:Celeste.TextMenu" />.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.Container">
            <summary>
              The <see cref="T:Celeste.TextMenu" /> that contains this item.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.SelectWiggler">
            <summary>
              Activated when this item is selected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.ValueWiggler">
            <summary>
              Should be activated when this item's value is changed
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.OnEnter">
            <summary>
              Performed when this item is selected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.OnLeave">
            <summary>
              Performed when this item is unselected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.OnPressed">
            <summary>
              Performed when <see cref="F:Celeste.Input.MenuConfirm" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.OnAltPressed">
            <summary>
              Performed when <see cref="F:Celeste.Input.MenuJournal" /> is pressed with this item selected.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Item.OnUpdate">
            <summary>
              Performed when this item is updated.
              </summary>
          </member>
        </members>
        <members name="Header">
          <member name="T:Celeste.TextMenu.Header">
            <summary>
              A <see cref="T:Celeste.TextMenu.Item" /> that displays a large label.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Header.#ctor(System.String)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.Header" />.
              </summary>
            <param name="title">The <see cref="T:System.String" /> to display.</param>
          </member>
          <member name="M:Celeste.TextMenu.Header.LeftWidth">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Header.Height">
            <inheritdoc />
          </member>
          <member name="F:Celeste.TextMenu.Header.Title">
            <summary>
              The displayed text.
              </summary>
          </member>
        </members>
        <members name="SubHeader">
          <member name="T:Celeste.TextMenu.SubHeader">
            <summary>
              A <see cref="T:Celeste.TextMenu.Item" /> that displays a label with padding above.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.SubHeader.#ctor(System.String)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.SubHeader" />.
              </summary>
            <param name="title">The <see cref="T:System.String" /> to display.</param>
          </member>
          <member name="M:Celeste.TextMenu.SubHeader.LeftWidth">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.SubHeader.Height">
            <inheritdoc />
          </member>
          <member name="F:Celeste.TextMenu.SubHeader.Title">
            <summary>
              The displayed text.
              </summary>
          </member>
        </members>
        <members name="Option{T}">
          <member name="T:Celeste.TextMenu.Option`1">
            <summary>
              A <see cref="T:Celeste.TextMenu.Item" /> that displays a toggleable value.
              </summary>
            <typeparam name="T">The underlying type for each option.</typeparam>
          </member>
          <member name="M:Celeste.TextMenu.Option`1.#ctor(System.String)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.Option`1" />.
              </summary>
            <param name="label">The display name for this setting.</param>
          </member>
          <member name="M:Celeste.TextMenu.Option`1.Add(System.String,`0,System.Boolean)">
            <summary>
              Add an option.
              </summary>
            <param name="label">The display text for this option.</param>
            <param name="value">The <typeparamref name="T" /> value of this option.</param>
            <param name="selected">Whether this option should start selected.</param>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Option`1.Change(System.Action{`0})">
            <summary>
              Set the action that will be invoked when the value changes.
              </summary>
            <param name="action">
            </param>
            <returns>
            </returns>
          </member>
          <member name="M:Celeste.TextMenu.Option`1.Added">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.LeftPressed">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.RightPressed">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.ConfirmPressed">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.Update">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.LeftWidth">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.RightWidth">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Option`1.Height">
            <inheritdoc />
          </member>
          <member name="F:Celeste.TextMenu.Option`1.Label">
            <summary>
              The displayed name for this setting.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Option`1.Index">
            <summary>
              The index of the current selection in <see cref="F:Celeste.TextMenu.Option`1.Values" />.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Option`1.OnValueChange">
            <summary>
              Invoked when the value changes.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Option`1.PreviousIndex">
            <summary>
              The previously selected index.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Option`1.Values">
            <summary>
              The list of label/value pairs.
              </summary>
          </member>
        </members>
        <members name="Slider">
          <member name="T:Celeste.TextMenu.Slider">
            <summary>
              A convenience class for creating a <see cref="T:Celeste.TextMenu.Option`1" /> from a <c><see cref="T:System.Int32" /> =&gt; <see cref="T:System.String" /></c> function.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Slider.#ctor(System.String,System.Func{System.Int32,System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.Slider" />.
              </summary>
            <param name="label">The display name for this setting.</param>
            <param name="values">A function for getting the display <see cref="T:System.String" /> for an <see cref="T:System.Int32" /> value.</param>
            <param name="min">The minimum possible value.</param>
            <param name="max">The maximum possible value.</param>
            <param name="value">The initial value.</param>
          </member>
        </members>
        <members name="OnOff">
          <member name="T:Celeste.TextMenu.OnOff">
            <summary>
              A convenience class for creating a <see cref="T:Celeste.TextMenu.Option`1" /> of type <see cref="T:System.Boolean" />.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.OnOff.#ctor(System.String,System.Boolean)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.OnOff" />.
              </summary>
            <param name="label">The display name for this setting.</param>
            <param name="on">Whether this option should start enabled.</param>
          </member>
        </members>
        <members name="Setting">
          <member name="T:Celeste.TextMenu.Setting">
            <summary>
              An Item for configuring Button mappings.
              </summary>
          </member>
        </members>
        <members name="Button">
          <member name="T:Celeste.TextMenu.Button">
            <summary>
              An item that can perform an action when pressed.
              </summary>
          </member>
          <member name="M:Celeste.TextMenu.Button.#ctor(System.String)">
            <summary>
              Create a new <see cref="T:Celeste.TextMenu.Button" />.
              </summary>
            <param name="label">The display name for this item.</param>
          </member>
          <member name="M:Celeste.TextMenu.Button.ConfirmPressed">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Button.LeftWidth">
            <inheritdoc />
          </member>
          <member name="M:Celeste.TextMenu.Button.Height">
            <inheritdoc />
          </member>
          <member name="F:Celeste.TextMenu.Button.Label">
            <summary>
              The display name for this item.
              </summary>
          </member>
          <member name="F:Celeste.TextMenu.Button.AlwaysCenter">
            <summary>
              Whether this item should always be rendered in the center of the menu.
              </summary>
          </member>
        </members>
        <members name="LanguageButton">
          <member name="T:Celeste.TextMenu.LanguageButton">
            <summary>
            An Item for configuring language settings.
            </summary>
          </member>
        </members>
      </members>
    </members>
    <members name="Other">
      <members name="ScreenWipe">
        <member name="T:Celeste.ScreenWipe">
          <summary>
            A <see cref="T:Monocle.Renderer" /> used to draw a series of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionColor" /> on the screen.
            </summary>
        </member>
        <member name="P:Celeste.ScreenWipe.Right">
          <summary>
            The right bound of the wipe.
            </summary>
        </member>
        <member name="P:Celeste.ScreenWipe.Bottom">
          <summary>
            The bottom bound of the wipe.
            </summary>
        </member>
        <member name="M:Celeste.ScreenWipe.#ctor(Monocle.Scene,System.Boolean,System.Action)">
          <summary>
          </summary>
          <param name="scene">The scene to add this <see cref="T:Celeste.ScreenWipe" /> to.</param>
          <param name="wipeIn">Whether to wipe inwards or outwards.</param>
          <param name="onComplete">An action to perform after the wipe has ended.</param>
        </member>
        <member name="M:Celeste.ScreenWipe.Wait">
          <summary>
            Get an <see cref="T:System.Collections.IEnumerator" /> that waits until the wipe completes.<br />
            Should be used when using a <see cref="T:Celeste.ScreenWipe" /> in a <see cref="T:Monocle.Coroutine" />.
            </summary>
          <returns>
          </returns>
        </member>
        <member name="M:Celeste.ScreenWipe.Cancel">
          <summary>
            Cancel and remove this ScreenWipe.
            </summary>
        </member>
        <member name="M:Celeste.ScreenWipe.DrawPrimitives(Microsoft.Xna.Framework.Graphics.VertexPositionColor[])">
          <summary>
            Draw a shape to the screen using a set of vertices.
            </summary>
          <param name="vertices">
          </param>
        </member>
        <member name="F:Celeste.ScreenWipe.WipeColor">
          <summary>
            The color of the wipe.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Scene">
          <summary>
            The scene this wipe was added to.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.WipeIn">
          <summary>
            Whether to wipe inwards or outwards.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Percent">
          <summary>
            How much of the screenwipe has been completed.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.OnComplete">
          <summary>
            An action to perform after the wipe has ended.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Completed">
          <summary>
            Whether the wipe has completed.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Duration">
          <summary>
            How long this wipe animation will take.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.EndTimer">
          <summary>
            How long the wipe will be on screen.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Left">
          <summary>
            The left bound of the wipe.
            </summary>
        </member>
        <member name="F:Celeste.ScreenWipe.Top">
          <summary>
            The top bound of the wipe.
            </summary>
        </member>
      </members>
    </members>
  </members>
  <!--
  Monocle Docs to be structured in the same way as the source code.
  https://bitbucket.org/MattThorson/monocle-engine/src/default/Monocle/
  -->
  <members name="Monocle">
    <members name="Engine">
      <member name="M:Monocle.Engine.RenderCore">
        <summary>
          Override if you want to change the core rendering functionality of Monocle Engine.<br />
          By default, this simply sets the render target to null, clears the screen, and renders the current Scene.
        </summary>
      </member>
      <member name="M:Monocle.Engine.OnSceneTransition">
        <summary>
          Called after a Scene ends, before the next Scene begins.
        </summary>
      </member>
      <member name="P:Monocle.Engine.Scene">
        <summary>
          The currently active Scene. Note that if set, the Scene will not actually change until the end of the Update.
        </summary>
      </member>
    </members>
    <members name="Entity">
      <member name="M:Monocle.Entity.SceneBegin">
        <summary>
          Called when the containing Scene Begins.
        </summary>
      </member>
      <member name="M:Monocle.Entity.SceneEnd">
        <summary>
          Called when the containing Scene Ends.
        </summary>
      </member>
      <member name="M:Monocle.Entity.Awake">
        <summary>
          Called before the frame starts, after Entities are added and removed, on the frame that the Entity was added.<br />
          Useful if you added two Entities in the same frame, and need them to detect each other before they start Updating.
        </summary>
        <param name="scene">
        </param>
      </member>
      <member name="M:Monocle.Entity.Added">
        <summary>
          Called when this Entity is added to a Scene, which only occurs immediately before each Update.<br />
          Keep in mind, other Entities to be added this frame may be added after this Entity.<br />
          See <see cref="M:Monocle.Entity.Awake" /> for after all Entities are added, but still before the frame Updates.
        </summary>
        <param name="scene">
        </param>
      </member>
      <member name="M:Monocle.Entity.Removed">
        <summary>
          Called when the Entity is removed from a Scene.
        </summary>
        <param name="scene">
        </param>
      </member>
      <member name="M:Monocle.Entity.Update">
        <summary>
          Do game logic here, but do not render here. Not called if the Entity is not Active.
        </summary>
      </member>
      <member name="M:Monocle.Entity.Render">
        <summary>
          Draw the Entity here. Not called if the Entity is not Visible.
        </summary>
      </member>
      <member name="M:Monocle.Entity.DebugRender">
        <summary>
          Draw any debug visuals here. Only called if the console is open, but still called even if the Entity is not Visible.
        </summary>
      </member>
      <member name="M:Monocle.Entity.HandleGraphicsReset">
        <summary>
          Called when the graphics device resets. When this happens, any RenderTargets or other contents of VRAM will be wiped and need to be regenerated.
        </summary>
      </member>
      <member name="M:Monocle.Entity.Add(Monocle.Component)">
        <summary>
          Shortcut function for adding a Component to the Entity's Components list.
        </summary>
        <param name="component">The Component to add.</param>
      </member>
      <member name="M:Monocle.Entity.Remove(Monocle.Component)">
        <summary>
          Shortcut function for removing an Component from the Entity's Components list.
        </summary>
        <param name="component">The Component to remove.</param>
      </member>
      <member name="M:Monocle.Entity.Add(Monocle.Component[])">
        <summary>
          Shortcut function for adding a set of Components from the Entity's Components list.
        </summary>
        <param name="components">The Components to add.</param>
      </member>
      <member name="M:Monocle.Entity.Remove(Monocle.Component[])">
        <summary>
          Shortcut function for removing a set of Components from the Entity's Components list.
        </summary>
        <param name="components">The Components to remove.</param>
      </member>
      <member name="M:Monocle.Entity.GetEnumerator">
        <summary>
          Allows you to iterate through all Components in the Entity.
        </summary>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Entity.System#Collections#IEnumerable#GetEnumerator">
        <summary>
          Allows you to iterate through all Components in the Entity.
        </summary>
        <returns>
        </returns>
      </member>
    </members>
    <members name="Scene">
      <member name="M:Monocle.Scene.OnInterval(System.Float32)">
        <summary>
          Returns whether the Scene timer has passed the given time interval since the last frame. <br />
          Ex: given 2.0f, this will return true once every 2 seconds.
        </summary>
        <param name="interval">The time interval to check for</param>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.OnInterval(System.Float32,System.Float32)">
        <summary>
          Returns whether the Scene timer has passed the given time interval since the last frame.
          Ex: given 2.0f, this will return true once every 2 seconds
        </summary>
        <param name="interval">The time interval to check for</param>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.CreateAndAdd``1">
        <summary>
          Shortcut to call Engine.Pooler.Create, add the Entity to this Scene, and return it. Entity type must be marked as Pooled.
        </summary>
        <typeparam name="T">Pooled Entity type to create</typeparam>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.Item(Monocle.BitTag)">
        <summary>
          Quick access to entire tag lists of Entities. Result will never be null.
        </summary>
        <param name="tag">The tag list to fetch</param>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.Add(Monocle.Entity)">
        <summary>
          Shortcut function for adding an Entity to the Scene's Entities list.
        </summary>
        <param name="entity">The Entity to add</param>
      </member>
      <member name="M:Monocle.Scene.Remove(Monocle.Entity)">
        <summary>
          Shortcut function for removing an Entity from the Scene's Entities list.
        </summary>
        <param name="entity">The Entity to remove</param>
      </member>
      <member name="M:Monocle.Scene.Add(System.Collections.Generic.IEnumerable{Monocle.Entity})">
        <summary>
          Shortcut function for adding a set of Entities from the Scene's Entities list
        </summary>
        <param name="entities">The Entities to add</param>
      </member>
      <member name="M:Monocle.Scene.Remove(System.Collections.Generic.IEnumerable{Monocle.Entity})">
        <summary>
          Shortcut function for removing a set of Entities from the Scene's Entities list
        </summary>
        <param name="entities">The Entities to remove</param>
      </member>
      <member name="M:Monocle.Scene.Add(Monocle.Entity[])">
        <summary>
          Shortcut function for adding a set of Entities from the Scene's Entities list
        </summary>
        <param name="entities">The Entities to add</param>
      </member>
      <member name="M:Monocle.Scene.Remove(Monocle.Entity[])">
        <summary>
          Shortcut function for removing a set of Entities from the Scene's Entities list
        </summary>
        <param name="entities">The Entities to remove</param>
      </member>
      <member name="M:Monocle.Scene.GetEnumerator">
        <summary>
          Allows you to iterate through all Entities in the Scene
        </summary>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.System#Collections#IEnumerable#GetEnumerator">
        <summary>
          Allows you to iterate through all Entities in the Scene
        </summary>
        <returns>
        </returns>
      </member>
      <member name="M:Monocle.Scene.Add(Monocle.Renderer)">
        <summary>
          Shortcut function to add a Renderer to the Renderer list
        </summary>
        <param name="renderer">The Renderer to add</param>
      </member>
      <member name="M:Monocle.Scene.Remove(Monocle.Renderer)">
        <summary>
          Shortcut function to remove a Renderer from the Renderer list
        </summary>
        <param name="renderer">The Renderer to remove</param>
      </member>
    </members>
    <members name="Components">
      <members name="Component">
        <member name="M:Monocle.Component.Added(Monocle.Entity)">
          <summary>
            Called when this Component is added to an Entity.
            </summary>
          <param name="entity">
          </param>
        </member>
        <member name="M:Monocle.Component.Removed(Monocle.Entity)">
          <summary>
            Called when this Component is removed from an Entity.
            </summary>
          <param name="entity">
          </param>
        </member>
        <member name="M:Monocle.Component.EntityAdded(Monocle.Scene)">
          <inheritdoc cref="M:Monocle.Entity.Added(Monocle.Scene)" />
        </member>
        <member name="M:Monocle.Component.EntityRemoved(Monocle.Scene)">
          <inheritdoc cref="M:Monocle.Entity.Removed(Monocle.Scene)" />
        </member>
        <member name="M:Monocle.Component.SceneEnd(Monocle.Scene)">
          <inheritdoc cref="M:Monocle.Entity.SceneEnd(Monocle.Scene)" />
        </member>
        <member name="M:Monocle.Component.EntityAwake">
          <inheritdoc cref="M:Monocle.Entity.Awake(Monocle.Scene)" />
        </member>
        <member name="M:Monocle.Component.Update">
          <summary>
            Do game logic here, but do not render here. Not called if the Component is not Active.
            </summary>
        </member>
        <member name="M:Monocle.Component.Render">
          <summary>
            Draw the Component here. Not called if the Component is not Visible.
            </summary>
        </member>
        <member name="M:Monocle.Component.DebugRender(Monocle.Camera)">
          <summary>
            Draw any debug visuals here. Only called if the console is open, but still called even if the Component is not Visible.
            </summary>
          <param name="camera">
          </param>
        </member>
        <member name="M:Monocle.Component.HandleGraphicsReset">
          <inheritdoc cref="M:Monocle.Entity.HandleGraphicsReset" />
        </member>
        <member name="M:Monocle.Component.HandleGraphicsCreate">
          <inheritdoc cref="M:Monocle.Entity.HandleGraphicsCreate" />
        </member>
      </members>
      <members name="Graphics">
        <members name="Sprite">
          <member name="T:Monocle.Sprite">
            <summary>
					  A component that can display animations made of <see cref="T:Monocle.MTexture" />s.
				  </summary>
          </member>
          <member name="M:Monocle.Sprite.#ctor(Monocle.Atlas,System.String)">
            <summary>
					  Create a new Sprite from a texture <see cref="T:Monocle.Atlas" /> and a root <paramref name="path" />.
				  </summary>
            <param name="atlas">The atlas to draw textures from.</param>
            <param name="path">The root path for this sprite's animation textures.</param>
          </member>
          <member name="M:Monocle.Sprite.Reset(Monocle.Atlas,System.String)">
            <summary>
					  Reset this Sprite from a texture <see cref="T:Monocle.Atlas" /> and a root <paramref name="path" />.
				  </summary>
            <param name="atlas">The atlas to draw textures from.</param>
            <param name="path">The root path for this sprite's animation textures.</param>
          </member>
          <member name="M:Monocle.Sprite.GetFrame(System.String,System.Int32)">
            <summary>
					  Retrieve the <see cref="T:Monocle.MTexture" /> associated with a specific frame of an animation.
				  </summary>
            <param name="animation">The name of the animation.</param>
            <param name="frame">The frame index.</param>
            <returns>
            </returns>
          </member>
          <member name="P:Monocle.Sprite.Center">
            <summary>
					  The relative center of the sprite.
				  </summary>
          </member>
          <member name="M:Monocle.Sprite.SetAnimationFrame(System.Int32)">
            <summary>
					  Set the current animation to the specified <paramref name="frame" />.
				  </summary>
            <param name="frame">
            </param>
          </member>
          <member name="M:Monocle.Sprite.AddLoop(System.String,System.String,System.Single)">
            <summary>
					  Add a repeating animation to the sprite that can then be referenced using <paramref name="id" />.
				  </summary>
            <param name="id">The Animation id.</param>
            <param name="path">
					  Path relative to <see cref="F:Monocle.Sprite.Path" /> to draw textures from.
				  </param>
            <param name="delay">Delay between each frame.</param>
          </member>
          <member name="M:Monocle.Sprite.AddLoop(System.String,System.String,System.Single,System.Int32[])">
            <inheritdoc cref="M:Monocle.Sprite.AddLoop(System.String,System.String,System.Single)" />
            <param name="frames">The frame indices to use in the animation.</param>
          </member>
          <member name="M:Monocle.Sprite.AddLoop(System.String,System.Single,Monocle.MTexture[])">
            <inheritdoc cref="M:Monocle.Sprite.AddLoop(System.String,System.String,System.Single)" />
            <param name="frames">The textures to use as frames for this animation.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String)">
            <summary>
					  Add an animation to the sprite that can then be referenced using <paramref name="id" />.
				  </summary>
            <param name="id">The Animation id.</param>
            <param name="path">
					  Path relative to <see cref="F:Monocle.Sprite.Path" /> to draw textures from.
				  </param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single)">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String)" />
            <param name="delay">Delay between each frame.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single,System.Int32[])">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single)" />
            <param name="frames">The frame indices to use in the animation.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single,System.String)">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single)" />
            <param name="into">The animation to play once this one ends.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single,Monocle.Chooser{System.String})">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single)" />
            <param name="into">Determines the animation to play once this one ends.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single,System.String,System.Int32[])">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single,System.String)">
            </inheritdoc>
            <param name="frames">The frame indices to use in the animation.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.Single,System.String,Monocle.MTexture[])">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single,System.String)">
            </inheritdoc>
            <param name="frames">The textures to use as frames for this animation.</param>
          </member>
          <member name="M:Monocle.Sprite.Add(System.String,System.String,System.Single,Monocle.Chooser{System.String},System.Int32[])">
            <inheritdoc cref="M:Monocle.Sprite.Add(System.String,System.String,System.Single,Monocle.Chooser{System.String})">
            </inheritdoc>
            <param name="frames">The frame indices to use in the animation.</param>
          </member>
          <member name="M:Monocle.Sprite.ClearAnimations">
            <summary>
					  Remove all animation data from the sprite.
				  </summary>
          </member>
          <member name="M:Monocle.Sprite.Play(System.String,System.Boolean,System.Boolean)">
            <summary>
					  Play an animation stored in this sprite.
				  </summary>
            <param name="id">The animation to play.</param>
            <param name="restart">Whether to restart the animation if it is already playing.</param>
            <param name="randomizeFrame">Whether to randomize the starting frame and animation timer.</param>
          </member>
          <member name="M:Monocle.Sprite.PlayOffset(System.String,System.Single,System.Boolean)">
            <summary>
					  Play an animation stored in this sprite.
				  </summary>
            <param name="id">The animation to play.</param>
            <param name="offset">The amount to add to the animation timer.</param>
            <param name="restart">Whether to restart the animation if it is already playing.</param>
          </member>
          <member name="M:Monocle.Sprite.PlayRoutine(System.String,System.Boolean)">
            <summary>
					  Play an animation, returning an IEnumerator that will return <c>null</c> until the the sprite stops animating.
				  </summary>
            <param name="id">The animation to play.</param>
            <param name="restart">Whether to restart the animation if it is already playing.</param>
            <returns>
            </returns>
          </member>
          <member name="M:Monocle.Sprite.ReverseRoutine(System.String,System.Boolean)">
            <summary>
					  Play an animation stored in this sprite, setting <see cref="F:Monocle.Sprite.Rate" /> to negative.<br />
					  Returns an IEnumerator that will return <c>null</c> until the the sprite stops animating.
				  </summary>
            <param name="id">The animation to play.</param>
            <param name="restart">Whether to restart the animation if it is already playing.</param>
          </member>
          <member name="M:Monocle.Sprite.Reverse(System.String,System.Boolean)">
            <summary>
					  Play an animation stored in this sprite, setting <see cref="F:Monocle.Sprite.Rate" /> to negative.
				  </summary>
            <param name="id">The animation to play.</param>
            <param name="restart">Whether to restart the animation if it is already playing.</param>
          </member>
          <member name="M:Monocle.Sprite.Has(System.String)">
            <summary>
					  Whether this sprite has an animation matching <paramref name="id" />.
				  </summary>
            <param name="id">
            </param>
            <returns>
            </returns>
          </member>
          <member name="M:Monocle.Sprite.Stop">
            <summary>
					  Stop the currently playing animation.
				  </summary>
          </member>
          <member name="P:Monocle.Sprite.Animating">
            <summary>
					  Whether this sprite is currently playing an animation.
				  </summary>
          </member>
          <member name="M:Monocle.Sprite.DrawSubrect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Rectangle)">
            <summary>
					  Draw a rectangle from the current frame.
				  </summary>
            <param name="offset">Relative offset to draw at.</param>
            <param name="rectangle">Rectangle to draw.</param>
          </member>
          <member name="F:Monocle.Sprite.Rate">
            <summary>
					  The animation speed modifier.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.UseRawDeltaTime">
            <summary>
					  Whether to update animations based on <see cref="P:Monocle.Engine.RawDeltaTime" />.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.OnFinish">
            <summary>
					  Invoked when this sprite stops animating.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.OnLoop">
            <summary>
					  Invoked when current the animation loops.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.OnFrameChange">
            <summary>
					  Invoked when when the current frame changes.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.OnLastFrame">
            <summary>
					  Invoked when the animation is about to end, loop, or change.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.OnChange">
            <summary>
					  Invoked when the current animation changes.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.Path">
            <summary>
					  The root directory of this sprite's animations.
				  </summary>
          </member>
          <member name="F:Monocle.Sprite.Animation.Goto">
            <summary>
					  Used to determine the animation to play once this one ends.
				  </summary>
          </member>
        </members>
      </members>
    </members>
    <members name="Graphics">
      <members name="Atlas">
        <member name="T:Monocle.Atlas">
          <summary>
            Used for storing and retrieving <see cref="T:Monocle.MTexture" />s from images and packed textures.
            </summary>
        </member>
        <member name="F:Monocle.Atlas.Sources">
          <summary>
            The list of textures used by this Atlas.
            </summary>
        </member>
        <member name="T:Monocle.Atlas.AtlasDataFormat">
          <summary>
            Used to determine how data should be read.
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.TexturePacker_Sparrow">
          <summary>
            Presumeably for use with <see href="https://www.codeandweb.com/texturepacker/starling">this</see>.<br />
            (Unused)
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.CrunchXml">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />
            <br />
            (Unused)
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.CrunchBinary">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />
            <br />
            (Unused)
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.CrunchXmlOrBinary">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />
            <br />
            (Unused)
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.CrunchBinaryNoAtlas">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />
            <br />
            (Unused)
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.Packer">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />. Reads .meta files.
            </summary>
        </member>
        <member name="F:Monocle.Atlas.AtlasDataFormat.PackerNoAtlas">
          <summary>
            <see href="https://github.com/ChevyRay/crunch" />. Reads .meta files with associated .data files.
            </summary>
        </member>
        <member name="M:Monocle.Atlas.FromAtlas(System.String,Monocle.Atlas.AtlasDataFormat)">
          <summary>
            Read image data from a packed texture file into an Atlas.
            </summary>
          <param name="path">
          </param>
          <param name="format">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.FromMultiAtlas(System.String,System.String[],Monocle.Atlas.AtlasDataFormat)">
          <summary>
            Read image data from multiple packed texture files into an Atlas.
            </summary>
          <param name="rootPath">The common root of all paths in <paramref name="dataPath" />.</param>
          <param name="dataPath">An array of filepaths contained within <paramref name="rootPath" />.</param>
          <param name="format">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.FromMultiAtlas(System.String,System.String,Monocle.Atlas.AtlasDataFormat)">
          <summary>
            Read image data from multiple XML atlas data files into an Atlas.
            </summary>
          <param name="rootPath">The directory where the files are contained.</param>
          <param name="filename">
            The base filename of the xml files.<br />
            (<c>filename0.xml</c>, <c>filename1.xml</c>, <c>...</c>)
            </param>
          <param name="format">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.FromDirectory(System.String)">
          <summary>
            Read image data from .png and .xnb files contained in a directory into an Atlas.
            </summary>
          <param name="path">The directory where the files are contained.</param>
          <returns>
          </returns>
        </member>
        <member name="P:Monocle.Atlas.Item(System.String)">
          <summary>
            Retrieve a texture contained in the atlas based on its id.
            </summary>
          <param name="id">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.Has(System.String)">
          <summary>
            Check whether a texture with the specified id exists in this atlas.
            </summary>
          <param name="id">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.GetOrDefault(System.String,Monocle.MTexture)">
          <summary>
            Retrieve a texture by id, or a default texture if nonexsistent.
            </summary>
          <param name="id">
          </param>
          <param name="defaultTexture">Returned if the <paramref name="id" /> does not exist.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.GetAtlasSubtextures(System.String)">
          <summary>
            Retrieve multiple textures stored under the same <paramref name="key" />.<br />
            Textures should be named in the following format
            <code>key0, key1, key2, key3</code>
            with up to six <c>0</c>s preceeding the index.
            </summary>
          <param name="key">The texture name.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.GetAtlasSubtexturesAt(System.String,System.Int32)">
          <summary>
            Retrieve a single texture from a set of textures with the same key.<br />
            See also: <seealso cref="M:Monocle.Atlas.GetAtlasSubtextures(System.String)" /></summary>
          <param name="key">The texture name.</param>
          <param name="index">The subtexture index.</param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.GetLinkedTexture(System.String)">
          <summary>
            Get the texture for the key this <paramref name="key" /> is linked to.
            </summary>
          <param name="key">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Atlas.Dispose">
          <summary>
            De-allocate resources used by this atlas.
            </summary>
        </member>
      </members>
    </members>
    <members name="Input">
      <members name="VirtualAxis">
        <member name="T:Monocle.VirtualAxis">
          <summary>
            A virtual input represented as a float between -1 and 1
          </summary>
        </member>
      </members>
      <members name="VirtualButton">
        <member name="T:Monocle.VirtualButton">
          <summary>
            A virtual input that is represented as a boolean. As well as simply checking the current button state, you can ask whether it was just pressed or released this frame. You can also keep the button press stored in a buffer for a limited time, or until it is consumed by calling ConsumeBuffer()
          </summary>
        </member>
        <member name="M:Monocle.VirtualButton.ConsumeBuffer">
          <summary>
            Ends the Press buffer for this button
          </summary>
        </member>
        <member name="M:Monocle.VirtualButton.ConsumePress">
          <summary>
            This button will not register a Press for the rest of the current frame, but otherwise continues to function normally. If the player continues to hold the button, next frame will not count as a Press. Also ends the Press buffer for this button
          </summary>
        </member>
      </members>
      <members name="VirtualInput">
        <member name="T:Monocle.VirtualInput">
          <summary>
            Represents a virtual button, axis or joystick whose state is determined by the state of its VirtualInputNodes
          </summary>
        </member>
        <member name="T:Monocle.VirtualInputNode">
          <summary>
            Add these to your VirtualInput to define how it determines its current input state.
            For example, if you want to check whether a keyboard key is pressed, create a VirtualButton and add to it a VirtualButton.KeyboardKey
          </summary>
        </member>
      </members>
      <members name="VirtualIntegerAxis">
        <member name="T:Monocle.VirtualIntegerAxis">
          <summary>
            A virtual input that is represented as a int that is either -1, 0, or 1
          </summary>
        </member>
      </members>
      <members name="VirtualJoystick">
        <member name="T:Monocle.VirtualJoystick">
          <summary>
            A virtual input that is represented as a Vector2, with both X and Y as values between -1 and 1
          </summary>
        </member>
      </members>
    </members>
    <members name="Particles">
      <members name="ParticleType">
        <member name="T:Monocle.ParticleType">
          <summary>
            A template from which <see cref="T:Monocle.Particle" />s can be created.
            </summary>
        </member>
        <member name="M:Monocle.ParticleType.#ctor">
          <summary>
            Create a new ParticleType with default-initialized fields.
            </summary>
        </member>
        <member name="M:Monocle.ParticleType.#ctor(Monocle.ParticleType)">
          <summary>
            Create a copy of another ParticleType.
            </summary>
          <param name="copyFrom">The ParticleType to copy.</param>
        </member>
        <member name="F:Monocle.ParticleType.Source">
          <summary>
            If set, the particle will use this texture.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.SourceChooser">
          <summary>
            If set, the particle will use a texture from its choices.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.Size">
          <summary>
            The scale of the texture.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.SpinFlippedChance">
          <summary>
            If true, the spin direction has a 50% chance of being flipped.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.ScaleOut">
          <summary>
            Whether the particle size will cube out over its lifetime.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.UseActualDeltaTime">
          <summary>
            Whether to update based on <see cref="P:Monocle.Engine.RawDeltaTime" /> instead of <see cref="P:Monocle.Engine.DeltaTime" />.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.ColorModes.Static">
          <summary>
            Particle color will be set to <see cref="F:Monocle.ParticleType.Color" />.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.ColorModes.Choose">
          <summary>
            Particle color will be randomly chosen from <see cref="F:Monocle.ParticleType.Color" /> and <see cref="F:Monocle.ParticleType.Color2" />.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.ColorModes.Blink">
          <summary>
            Particle color will be swap between <see cref="F:Monocle.ParticleType.Color" /> and <see cref="F:Monocle.ParticleType.Color2" /> every second. 
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.ColorModes.Fade">
          <summary>
            Particle color will fade from <see cref="F:Monocle.ParticleType.Color" /> to <see cref="F:Monocle.ParticleType.Color2" /> from start to end of life. 
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.FadeModes.None">
          <summary>
            Particle will not fade.  
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.FadeModes.Linear">
          <summary>
            Particle will fade linearly from start to end of life.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.FadeModes.Late">
          <summary>
            Particle will fade linearly starting when the particle has 1/4 life remaining.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.FadeModes.InAndOut">
          <summary>
            Particle will fade in for first quarter, and fade out for last quarter of life.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.RotationModes.None">
          <summary>
            Particle will start with the default orientation.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.RotationModes.Random">
          <summary>
            Particle will start rotated at a random angle.
            </summary>
        </member>
        <member name="F:Monocle.ParticleType.RotationModes.SameAsDirection">
          <summary>
            Particle will always be rotated towards its direction of travel.
            </summary>
        </member>
      </members>
    </members>
    <members name="Util">
      <members name="Calc">
        <member name="M:Monocle.Calc.Range(System.Random,System.Int32,System.Int32)">
          <summary>
            Returns a random integer between min (inclusive) and max (exclusive)
          </summary>
          <param name="random">
          </param>
          <param name="min">
          </param>
          <param name="max">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Calc.Range(System.Random,System.Single,System.Single)">
          <summary>
            Returns a random float between min (inclusive) and max (exclusive)
          </summary>
          <param name="random">
          </param>
          <param name="min">
          </param>
          <param name="max">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Calc.Range(System.Random,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
          <summary>
            Returns a random Vector2, and x- and y-values of which are between min (inclusive) and max (exclusive)
          </summary>
          <param name="random">
          </param>
          <param name="min">
          </param>
          <param name="max">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.Calc.ReadCSVIntWithTricks(System.String)">
          <summary>
            Read positive-integer CSV with some added tricks.
            Use - to add inclusive range. Ex: 3-6 = 3,4,5,6
            Use * to add multiple values. Ex: 4*3 = 4,4,4
          </summary>
          <param name="csv">
          </param>
          <returns>
          </returns>
        </member>
      </members>
      <members name="ChoiceSet">
        <member name="M:Monocle.ChoiceSet`1.Set(`0,System.Int32)">
          <summary>
            Sets the weight of a choice
          </summary>
          <param name="choice">
          </param>
          <param name="weight">
          </param>
        </member>
        <member name="P:Monocle.ChoiceSet`1.Item(`0)">
          <summary>
            Sets the weight of a choice, or gets its weight
          </summary>
          <param name="choice">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.ChoiceSet`1.Set(`0,System.Single)">
          <summary>
            Sets the chance of a choice. The chance is calculated based on the current state of ChoiceSet, so if
            other choices are changed later the chance will not be guaranteed to remain the same
          </summary>
          <param name="choice">
          </param>
          <param name="chance">A chance between 0 and 1.0f</param>
        </member>
        <member name="M:Monocle.ChoiceSet`1.SetMany(System.Single,`0[])">
          <summary>
            Sets the chance of many choices. Takes the chance of any of the given choices being picked, not the chance of
            any individual choice. The chances are calculated based on the current state of ChoiceSet, so if
            other choices are changed later the chances will not be guaranteed to remain the same
          </summary>
          <param name="totalChance">
          </param>
          <param name="choices">A chance between 0 and 1.0f</param>
        </member>
        <member name="M:Monocle.ChoiceSet`1.Get(System.Random)">
          <summary>
            Chooses a random choice in the set
          </summary>
          <param name="random">
          </param>
          <returns>
          </returns>
        </member>
        <member name="M:Monocle.ChoiceSet`1.Get">
          <summary>
            Chooses a random choice in the set, using Calc.Random to choose
          </summary>
          <returns>
          </returns>
        </member>
      </members>
      <members name="Chooser">
        <member name="T:Monocle.Chooser`1">
          <summary>
            Utility class for making weighted random choices from a set.
          </summary>
        </member>
        <member name="M:Monocle.Chooser`1.#ctor(`0,System.Single)">
          <summary>
            Initialize with a single choice with the given weight.
          </summary>
        </member>
        <member name="M:Monocle.Chooser`1.#ctor(`0[])">
          <summary>
            Initialize with a list of choices, all with a weight of 1.
          </summary>
        </member>
        <member name="M:Monocle.Chooser`1.FromString``1(System.String)">
          <summary>
            Parses a chooser from a string.
          </summary>
          <param name="data">Choices to parse. Format: "choice0:weight,choice1:weight,..."</param>
          <returns>
          </returns>
        </member>
      </members>
      <members name="Commands">
        <member name="P:Monocle.Commands.FunctionKeyActions">
          <summary>
            Actions that are executed when the corresponding Function Key is pressed.
          </summary>
        </member>
        <member name="M:Monocle.Commands.Log(System.Object,Microsoft.Xna.Framework.Color)">
          <summary>
            Logs an object to the debug console.
          </summary>
          <param name="obj">
          </param>
          <param name="color">Text color</param>
        </member>
        <member name="M:Monocle.Commands.Log(System.Object)">
          <summary>
            Logs an object to the debug console in White text.
          </summary>
          <param name="obj">
          </param>
        </member>
        <members name="Command">
          <member name="T:Monocle.Command">
            <summary>
              Adding this to a static method marks it as a command that can be executed from the debug screen.<br />
              The method can accept any number of <see cref="T:System.String" />, <see cref="T:System.Int32" />, <see cref="T:System.Single" />, or <see cref="T:System.Boolean" /> parameters.
            </summary>
          </member>
          <member name="F:Monocle.Command.Name">
            <summary>
              The string used to execute the command.
            </summary>
          </member>
          <member name="F:Monocle.Command.Help">
            <summary>
              A description of the command.
            </summary>
          </member>
          <member name="M:Monocle.Command.#ctor(System.String,System.String)">
            <summary>
              Marks a static method as a debug command.
            </summary>
            <param name="name">Used to execute the command.</param>
            <param name="help">A short description of the command.</param>
          </member>
        </members>
      </members>
      <members name="Draw">
        <member name="P:Monocle.Draw.Renderer">
          <summary>
            The currently-rendering Renderer
          </summary>
        </member>
        <member name="P:Monocle.Draw.SpriteBatch">
          <summary>
            All 2D rendering is done through this SpriteBatch instance
          </summary>
        </member>
        <member name="P:Monocle.Draw.DefaultFont">
          <summary>
            The default Monocle font (Consolas 12). Loaded automatically by Monocle at startup
          </summary>
        </member>
        <member name="F:Monocle.Draw.Particle">
          <summary>
            A subtexture used to draw particle systems.
            Will be generated at startup, but you can replace this with a subtexture from your Atlas to reduce texture swaps.
            Should be a 2x2 white pixel
          </summary>
        </member>
        <member name="F:Monocle.Draw.Pixel">
          <summary>
            A subtexture used to draw rectangles and lines.
            Will be generated at startup, but you can replace this with a subtexture from your Atlas to reduce texture swaps.
            Use the top left pixel of your Particle Subtexture if you replace it!
            Should be a 1x1 white pixel
          </summary>
        </member>
      </members>
      <members name="SaveLoad">
        <member name="M:Monocle.SaveLoad.SerializeToFile``1(``0,System.String,Monocle.SaveLoad.SerializeModes)">
          <summary>
            Save an object to a file so you can load it later
          </summary>
        </member>
        <member name="M:Monocle.SaveLoad.SafeSerializeToFile``1(``0,System.String,Monocle.SaveLoad.SerializeModes)">
          <summary>
            Save an object to a file so you can load it later.
            Will not crash if the save fails
          </summary>
          <returns>Whether the save succeeded</returns>
        </member>
        <member name="M:Monocle.SaveLoad.DeserializeFromFile``1(System.String,Monocle.SaveLoad.SerializeModes)">
          <summary>
            Load an object that was previously serialized to a file
          </summary>
        </member>
        <member name="M:Monocle.SaveLoad.SafeDeserializeFromFile``1(System.String,Monocle.SaveLoad.SerializeModes,System.Boolean)">
          <summary>
            Load an object that was previously serialized to a file
            If the load fails or the file does not exist, default(T) will be returned
          </summary>
        </member>
        <member name="M:Monocle.SaveLoad.SafeDeserializeFromFile``1(System.String,Monocle.SaveLoad.SerializeModes,System.Boolean@,System.Boolean)">
          <summary>
            Load an object that was previously serialized to a file
            If the load fails or the file does not exist, default(T) will be returned
          </summary>
          <param name="loadError">True if the load fails despite the requested file existing (for example due to corrupted data)</param>
        </member>
      </members>
      <members name="Tracker">
        <members name="Tracked">
          <member name="T:Monocle.Tracked">
            <summary>
                Marks an entity or component to be added to the Tracker.
                </summary>
          </member>
          <member name="M:Monocle.Tracked.#ctor(System.Boolean)">
            <summary>
                Marks an entity or component to be added to the Tracker.
                </summary>
            <param name="inherited">Whether all child classes should also be tracked.</param>
          </member>
          <member name="F:Monocle.Tracked.Inherited">
            <summary>
                Whether all child classes should also be tracked.
                </summary>
          </member>
        </members>
      </members>
    </members>
  </members>
  <!--
  From https://github.com/WardBenjamin/SimplexNoise/blob/master/SimplexNoise/Noise.cs
  -->
  <members name="SimplexNoise">
    <members name="Noise">
      <member name="T:SimplexNoise.Noise">
        <summary>
            Implementation of the Perlin simplex noise, an improved Perlin noise algorithm.
            Based loosely on SimplexNoise1234 by Stefan Gustavson: http://staffwww.itn.liu.se/~stegu/aqsis/aqsis-newnoise/
            </summary>
      </member>
      <member name="M:SimplexNoise.Noise.Generate(System.Single)">
        <summary>
            1D simplex noise
            </summary>
        <param name="x">
        </param>
        <returns>
        </returns>
      </member>
      <member name="M:SimplexNoise.Noise.Generate(System.Single,System.Single)">
        <summary>
            2D simplex noise
            </summary>
        <param name="x">
        </param>
        <param name="y">
        </param>
        <returns>
        </returns>
      </member>
    </members>
  </members>
  <members name="Everest">
    <member name="T:Celeste.Mod.Core.CoreModule">
      <summary>
            The Everest core module class. Feel free to access the core module settings from your own mod.
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.BadelineOldsiteEnd">
      <summary>
            Custom "end zone" for BadelineOldsite in custom levels.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.CustomBirdTutorial.TriggerShowTutorial">
      <summary>
            Makes the tutorial bubble show up.
            Called automatically if no Custom Tutorial Bird Trigger that would make the tutorial bubble show up is present in the room.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.CustomBirdTutorial.TriggerHideTutorial">
      <summary>
            Makes the tutorial bubble disappear and the bird fly away.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.CustomBirdTutorial.FindById(Celeste.Level,System.String)">
      <summary>
            Helper method to find a custom bird tutorial in a scene by bird ID.
            Note that if only 1 bird is on screen, you can use level.Tracker.GetEntity&lt;CustomBirdTutorial&gt;() instead.
            </summary>
      <param name="level">The level to search in</param>
      <param name="birdId">The ID of the bird to look for</param>
      <returns>The custom bird tutorial matching this ID, or null if none was found.</returns>
    </member>
    <member name="T:Celeste.Mod.Entities.CustomCoreMessage">
      <summary>
            Based on CoreMessage, to be used by custom maps.
            
            Checks for the following new attributes:
            - `string dialog` (default: `app_ending`)
            - `bool outline` (default: `false`)
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.CustomEntityAttribute">
      <summary>
            Mark this entity as a Custom <see cref="T:Monocle.Entity" /> or <see cref="T:Celeste.Trigger" />.
            <br />
            This Entity will be loaded when a matching ID is detected.
            <br /><seealso href="https://github.com/EverestAPI/Resources/wiki/Custom-Entities-and-Triggers#customentity">Read More.</seealso></summary>
    </member>
    <member name="F:Celeste.Mod.Entities.CustomEntityAttribute.IDs">
      <summary>
            A list of unique identifiers for this Entity.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.CustomEntityAttribute.#ctor(System.String[])">
      <summary>
            Mark this entity as a Custom <see cref="T:Monocle.Entity" /> or <see cref="T:Celeste.Trigger" />.
            </summary>
      <param name="ids">A list of unique identifiers for this Entity.</param>
    </member>
    <member name="T:Celeste.Mod.Entities.CustomEventAttribute">
      <summary>
            Mark this entity as a Custom <see cref="T:Celeste.CutsceneEntity" /> or other Event <see cref="T:Monocle.Entity" />.
            <br />
            This Entity will be added when a matching Event ID is triggered.
            <br /><seealso href="https://github.com/EverestAPI/Resources/wiki/Creating-Custom-Events#customevent-attribute">Read More.</seealso></summary>
    </member>
    <member name="F:Celeste.Mod.Entities.CustomEventAttribute.IDs">
      <summary>
            A list of unique identifiers for this Event.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.CustomEventAttribute.#ctor(System.String[])">
      <summary>
            Mark this entity as a Custom <see cref="T:Celeste.CutsceneEntity" /> or other Event <see cref="T:Monocle.Entity" />.
            </summary>
      <param name="ids">A list of unique identifiers for this Event.</param>
    </member>
    <member name="T:Celeste.Mod.Entities.CustomMemorial">
      <summary>
            Based on Memorial, to be used by custom maps.
            
            Checks for the following new attributes:
            - `string dialog` (default: `memorial`)
            - `string sprite` (default: `scenery/memorial/memorial`)
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.CustomMemorialText">
      <summary>
            Based on MemorialText, spawned by CustomMemorial.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.EntityTrigger.ManuallyTrigger(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Trigger all <see cref="T:Celeste.Mod.Entities.EntityTrigger" />s that have <paramref name="point" /> within their range.
            </summary>
      <param name="point" />
    </member>
    <member name="T:Celeste.Mod.Entities.EntityTriggerListener">
      <summary>
            Allows an Entity to be triggered using an EntityTrigger.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Entities.EntityTriggerListener.OnTrigger">
      <summary>
            Called when the Player enters an EntityTrigger that has this entity in its range.<br />
            May be called more than once if multiple EntityTriggers are present.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Entities.EntityTriggerListener.OnStartTriggered">
      <summary>
            Called if a persistent EntityTrigger that has this entity in its range has its flag already set.<br />
            May be called more than once if multiple EntityTriggers are present.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.EntityTriggerListener.#ctor(System.Action,System.Action)">
      <summary>
            Create a new EntityTriggerListener component.
            </summary>
      <param name="onTrigger">Called when the Player enters an EntityTrigger that has this entity in its range.<br />
            May be called more than once if multiple EntityTriggers are present.</param>
      <param name="onStartTriggered">Called if a persistent EntityTrigger that has this entity in its range has its flag already set.<br />
            May be called more than once if multiple EntityTriggers are present.</param>
    </member>
    <member name="T:Celeste.Mod.Entities.FlagTrigger">
      <summary>
            A general purpose flag setting trigger, to be used by custom maps.
            
            Checks for the following new attributes:
            - `string flag`
            - `bool state`
            - `Modes mode` (default: `OnPlayerEnter`; available: `OnPlayerEnter, OnPlayerLeave, OnLevelStart`)
            - `bool only_once` (default: `false`)
            - `int death_count` (default: `-1`)
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.MusicLayerTrigger">
      <summary>
            A trigger allowing turning on or off specific music layers.
            
            Attributes:
            - `layers`: the list of layers to modify, comma-separated (for example `1,3,4`)
            - `enable`: true to enable the specified layers, false to disable them.
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.RegisterStrawberryAttribute">
      <summary>
            Adds this <see cref="T:Celeste.Strawberry" /> or <see cref="T:Celeste.Mod.IStrawberry" /> to the <see cref="T:Celeste.Mod.StrawberryRegistry" />,
            <br />
            and allows it to be taken into account correctly in the total strawberry count.
            <br /><see href="https://github.com/EverestAPI/Resources/wiki/Custom-Entities-and-Triggers#registerstrawberry">Read More.</see></summary>
    </member>
    <member name="F:Celeste.Mod.Entities.RegisterStrawberryAttribute.isTracked">
      <summary>
            Whether the berry should be counted in the maximum berry count. 
            </summary>
    </member>
    <member name="F:Celeste.Mod.Entities.RegisterStrawberryAttribute.blocksNormalCollection">
      <summary>
            Whether the berry has specific collection rules.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Entities.RegisterStrawberryAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Adds this <see cref="T:Celeste.Strawberry" /> or <see cref="T:Celeste.Mod.IStrawberry" /> to the <see cref="T:Celeste.Mod.StrawberryRegistry" />.
            </summary>
      <param name="tracked">Whether the berry should be counted in the maximum berry count. </param>
      <param name="blocksCollection">Whether the berry has specific collection rules.</param>
    </member>
    <member name="T:Celeste.Mod.Entities.SmoothCameraOffsetTrigger">
      <summary>
            A Camera Offset Trigger lerping the offset depending on the player position.
            
            Attributes:
            - `offsetXFrom` / `offsetYFrom`: offset to fade from
            - `offsetXTo` / `offsetYTo`: offset to fade to
            - `positionMode`: fade direction
            - `onlyOnce`: enable to have the trigger remove itself when the player leaves it.
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.SpaceControllerBlocker">
      <summary>
            Semi-internal entity that removes any existing SpaceControllers.
            </summary>
    </member>
    <member name="T:Celeste.Mod.Entities.TriggerSpikesOriginal">
      <summary>
            Based on TriggerSpikes, to be used by custom maps.
            
            TriggerSpikes with the original spike graphics.
            </summary>
    </member>
    <member name="T:Celeste.Mod.BOOT">
      <summary>
            RUN AWAY. TURN AROUND. GO TO CELESTE'S MAIN FUNCTION INSTEAD.
            </summary>
    </member>
    <member name="T:Celeste.Mod.ButtonBinding">
      <summary>
            A wrapper class for a custom <see cref="T:Monocle.VirtualButton" />.
            <br />
            Default buttons can be set using <see cref="T:Celeste.Mod.DefaultButtonBindingAttribute" />.
            <br /><see href="https://github.com/EverestAPI/Resources/wiki/Mod-Settings#ButtonBinding">Read More</see></summary>
    </member>
    <member name="M:Celeste.Mod.ButtonBinding.ConsumeBuffer">
      <inheritdoc cref="M:Monocle.VirtualButton.ConsumeBuffer" />
    </member>
    <member name="M:Celeste.Mod.ButtonBinding.ConsumePress">
      <inheritdoc cref="M:Monocle.VirtualButton.ConsumePress" />
    </member>
    <member name="T:Celeste.Mod.DefaultButtonBindingAttribute">
      <summary>
            Sets the default <see cref="T:Microsoft.Xna.Framework.Input.Buttons" /> and <see cref="T:Microsoft.Xna.Framework.Input.Keys" /> of a <see cref="T:Celeste.Mod.ButtonBinding" /> setting.
            <br /><see href="https://github.com/EverestAPI/Resources/wiki/Mod-Settings#DefaultButtonBinding">Read More</see></summary>
    </member>
    <member name="F:Celeste.Mod.DefaultButtonBindingAttribute.Button">
      <summary>
            The default Button binding.
            </summary>
    </member>
    <member name="F:Celeste.Mod.DefaultButtonBindingAttribute.Key">
      <summary>
            The default Key binding.
            </summary>
    </member>
    <member name="F:Celeste.Mod.DefaultButtonBindingAttribute.ForceDefaultButton">
      <summary>
            Whether the default Button should always be bound.
            </summary>
    </member>
    <member name="F:Celeste.Mod.DefaultButtonBindingAttribute.ForceDefaultKey">
      <summary>
            Whether the default Key should always be bound.
            </summary>
    </member>
    <member name="M:Celeste.Mod.DefaultButtonBindingAttribute.#ctor(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.Input.Keys)">
      <summary>
            Sets the default <see cref="T:Microsoft.Xna.Framework.Input.Buttons" /> and <see cref="T:Microsoft.Xna.Framework.Input.Keys" /> of a <see cref="T:Celeste.Mod.ButtonBinding" /> setting.
            </summary>
      <param name="button">The default Button binding.</param>
      <param name="key">The default Key binding.</param>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.IsSubtexture(Monocle.MTexture)">
      <summary>
            Determine if the MTexture depicts a region of a larger VirtualTexture.
            </summary>
      <param name="input">The input texture.</param>
      <returns>True if the ClipRect is a subregion of the MTexture's VirtualTexture's Texture2D, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.GetSubtextureCopy(Monocle.MTexture)">
      <summary>
            Create a new, standalone copy of the region accessed via the MTexture.
            </summary>
      <param name="input">The input texture.</param>
      <returns>The output texture, matching the input MTexture's ClipRect.</returns>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.GetPaddedSubtextureCopy(Monocle.MTexture)">
      <summary>
            Create a new, standalone copy of the region accessed via the MTexture, with padding.
            </summary>
      <param name="input">The input texture.</param>
      <returns>The output texture, matching the input MTexture's Width and Height, with padding.</returns>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.Premultiply(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Lazily late-premultiply a texture: Multiply the values of the R, G and B channels by the value of the A channel.
            </summary>
      <param name="texture">The input texture.</param>
      <returns>A premultiplied copy of the input texture.</returns>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.Postdivide(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Lazily late-postdivide a texture: Divide the values of the R, G and B channels by the value of the A channel.
            </summary>
      <param name="texture">The input texture.</param>
      <returns>A postdivided copy of the input texture.</returns>
    </member>
    <member name="M:Celeste.Mod.ContentExtensions.LoadTextureLazyPremultiply(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>
            Load a texture and lazily late-premultiply it: Multiply the values of the R, G and B channels by the value of the A channel.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Emoji.Registered">
      <summary>
            A list of all registered emoji names, in order of their IDs.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Emoji.Register(System.String,Monocle.MTexture)">
      <summary>
            Register an emoji.
            </summary>
      <param name="name">The emoji name.</param>
      <param name="emoji">The emoji texture.</param>
    </member>
    <member name="M:Celeste.Mod.Emoji.Fill(Monocle.PixelFont)">
      <summary>
            Fill a font with emoji.
            </summary>
      <param name="font">The font to fill.</param>
    </member>
    <member name="M:Celeste.Mod.Emoji.Get(System.String)">
      <summary>
            Gets the char for the specified emoji.
            </summary>
      <param name="name">The emoji name.</param>
      <returns>The emoji char.</returns>
    </member>
    <member name="M:Celeste.Mod.Emoji.TryGet(System.String,System.Char@)">
      <summary>
            Gets the char for the specified emoji.
            </summary>
      <param name="name">The emoji name.</param>
      <param name="c">The emoji char.</param>
      <returns>Whether the emoji was registered or not.</returns>
    </member>
    <member name="M:Celeste.Mod.Emoji.IsMonochrome(System.Char)">
      <summary>
            Gets whether the emoji is monochrome or not.
            </summary>
      <param name="c">The emoji char.</param>
      <returns>Whether the emoji is monochrome or not.</returns>
    </member>
    <member name="M:Celeste.Mod.Emoji.Apply(System.String)">
      <summary>
            Transforms all instances of :emojiname: to \uSTART+ID
            </summary>
      <param name="text" />
      <returns />
    </member>
    <member name="F:Celeste.Mod.FileSystemModContent.Path">
      <summary>
            The path to the mod directory.
            </summary>
    </member>
    <member name="F:Celeste.Mod.MapBinsInModsModContent.Path">
      <summary>
            The path to the mod directory.
            </summary>
    </member>
    <member name="F:Celeste.Mod.AssemblyModContent.Assembly">
      <summary>
            The assembly containing the mod content as resources.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ZipModContent.Path">
      <summary>
            The path to the archive containing the mod content.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ZipModContent.Zip">
      <summary>
            The loaded archive containing the mod content.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Content.DumpOnLoad">
      <summary>
            Whether or not Everest should dump all game assets into a user-friendly format on load (technically on Process).
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Content.PathContentOrig">
      <summary>
            The path to the original /Content directory.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Content.PathDUMP">
      <summary>
            The path to the Everest /ModDUMP directory.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Content.Mods">
      <summary>
            List of all currently loaded content mods.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Content.Map">
      <summary>
            Mod content mapping. Use Everest.Content.Add, Get, and TryGet where applicable instead.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Content.NonConflictTypes">
      <summary>
            List of all types for which asset path conflicts don't matter.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.TryGet(System.String,Celeste.Mod.ModAsset@,System.Boolean)">
      <summary>
            Gets the ModAsset mapped to the given relative path.
            </summary>
      <param name="path">The relative asset path.</param>
      <param name="metadata">The resulting mod asset meta object.</param>
      <param name="includeDirs">Whether to include directories or not.</param>
      <returns>True if a mapping for the given path is present, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.Get(System.String,System.Boolean)">
      <summary>
            Gets the ModAsset mapped to the given relative path.
            </summary>
      <param name="path">The relative asset path.</param>
      <param name="includeDirs">Whether to include directories or not.</param>
      <returns>The resulting mod asset meta object, or null.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.TryGet``1(System.String,Celeste.Mod.ModAsset@,System.Boolean)">
      <summary>
            Gets the ModAsset mapped to the given relative path.
            </summary>
      <param name="path">The relative asset path.</param>
      <param name="metadata">The resulting mod asset meta object.</param>
      <param name="includeDirs">Whether to include directories or not.</param>
      <returns>True if a mapping for the given path is present, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.Get``1(System.String,System.Boolean)">
      <summary>
            Gets the ModAsset mapped to the given relative path.
            </summary>
      <param name="path">The relative asset path.</param>
      <param name="includeDirs">Whether to include directories or not.</param>
      <returns>The resulting mod asset meta object, or null.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.Add(System.String,Celeste.Mod.ModAsset)">
      <summary>
            Adds a new mapping for the given relative content path.
            </summary>
      <param name="path">The relative asset path.</param>
      <param name="metadata">The matching mod asset meta object.</param>
    </member>
    <member name="E:Celeste.Mod.Everest.Content.OnGuessType">
      <summary>
            Invoked when GuessType can't guess the asset format / type.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.GuessType(System.String,System.Type@,System.String@)">
      <summary>
            Guess the file type and format based on its path. 
            </summary>
      <param name="file">The relative asset path.</param>
      <param name="type">The file type.</param>
      <param name="format">The file format (file ending).</param>
      <returns>The passed asset path, trimmed if required.</returns>
    </member>
    <member name="E:Celeste.Mod.Everest.Content.OnUpdate">
      <summary>
            Invoked when content is being updated, allowing you to handle it.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.Crawl(Celeste.Mod.ModContent)">
      <summary>
            Crawl through the content mod and automatically fill the mod asset map.
            </summary>
      <param name="meta">The content mod to crawl through.</param>
    </member>
    <member name="E:Celeste.Mod.Everest.Content.OnProcessLoad">
      <summary>
            Invoked when content is being processed (most likely on load), allowing you to manipulate it.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.ProcessLoad(System.Object,System.String)">
      <summary>
            Process an asset and register it for further reprocessing in the future.
            Apply any mod-related changes to the asset based on the existing mod asset meta map.
            </summary>
      <param name="asset">The asset to process.</param>
      <param name="assetNameFull">The "full name" of the asset, preferable the relative asset path.</param>
      <returns>The processed asset.</returns>
    </member>
    <member name="E:Celeste.Mod.Everest.Content.OnProcessUpdate">
      <summary>
            Invoked when content is being processed (most likely on load or runtime update), allowing you to manipulate it.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.refreshEmojis(Celeste.Mod.ModAsset)">
      <summary>
            Searches for emoji in the given mod asset (recursively), returns true if at least one was found.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.DumpAll">
      <summary>
            Dump all dumpable game content into PathDUMP.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Content.Dump(System.String,System.Object)">
      <summary>
            Dump the given asset into an user-friendly and mod-compatible format.
            </summary>
      <param name="assetNameFull">The "full name" of the asset, preferable the relative asset path.</param>
      <param name="asset">The asset to process.</param>
    </member>
    <member name="F:Celeste.Mod.Everest.VersionString">
      <summary>
            The currently installed Everest version in string form.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.BuildString">
      <summary>
            The currently installed Everest build in string form.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Version">
      <summary>
            The currently installed Everest version.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Build">
      <summary>
            The currently installed Everest build.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.VersionSuffix">
      <summary>
            The currently installed Everest version suffix. For "1.2.3-a-b", this is "a-b"
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.VersionTag">
      <summary>
            The currently installed Everest version tag. For "1.2.3-a-b", this is "a"
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.VersionCommit">
      <summary>
            The currently installed Everest version tag. For "1.2.3-a-b", this is "b"
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.VersionCelesteString">
      <summary>
            The currently present Celeste version combined with the currently installed Everest build.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Args">
      <summary>
            The command line arguments passed when launching the game.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Modules">
      <summary>
            A collection of all currently loaded EverestModules (mods).
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.PathGame">
      <summary>
            The path to the directory holding Celeste.exe
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.PathSettings">
      <summary>
            The path to the Celeste /Saves directory.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.XDGPaths">
      <summary>
            Whether XDG paths should be used.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.PathEverest">
      <summary>
            Path to Everest base location. Defaults to the game directory.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.ChecksumHasher">
      <summary>
            The hasher used to determine the mod and installation hashes.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.GetChecksum(System.String)">
      <summary>
            Get the checksum for a given file.
            </summary>
      <param name="path">The file path.</param>
      <returns>A checksum.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.GetChecksum(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Get the checksum for a given mod. Might not be determined by the entire mod content.
            </summary>
      <param name="meta">The mod.</param>
      <returns>A checksum.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.GetChecksum(System.IO.Stream@)">
      <summary>
            Get the checksum for a given stream.
            </summary>
      <param name="stream">A reference to the stream. Gets converted to a MemoryStream if it isn't seekable.</param>
      <returns>A checksum.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Register(Celeste.Mod.EverestModule)">
      <summary>
            Register a new EverestModule (mod) dynamically. Invokes LoadSettings and Load.
            </summary>
      <param name="module">Mod to register.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Unregister(Celeste.Mod.EverestModule)">
      <summary>
            Unregisters an already registered EverestModule (mod) dynamically. Invokes Unload.
            </summary>
      <param name="module" />
    </member>
    <member name="M:Celeste.Mod.Everest.SaveSettings">
      <summary>
            Save all mod and user settings. Use this instead of UserIO.SaveHandler(false, true)
            </summary>
      <returns>The routine enumerator.</returns>
    </member>
    <member name="T:Celeste.Mod.Everest.Events">
      <summary>
            Events that are called at various points in the game.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Celeste.OnExiting">
      <summary>
            Called after the main gameloop has finished running.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Celeste.OnShutdown">
      <summary>
            Called just before the Main method exits.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.MainMenu.OnCreateButtons">
      <summary>
            Called after <see cref="M:Celeste.OuiMainMenu.CreateButtons" />.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Level.OnPause">
      <summary>
            Called after <see cref="M:Celeste.Level.Pause(System.Int32,System.Boolean,System.Boolean)" />.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Level.OnCreatePauseMenuButtons">
      <summary>
            Called when the Level's pause menu is created.
            </summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Level.OnTransitionTo">
      <summary>
            Called after <see cref="M:Celeste.Level.TransitionTo(Celeste.LevelData,Microsoft.Xna.Framework.Vector2)" /></summary>
    </member>
    <member name="E:Celeste.Mod.Everest.Events.Level.OnLoadEntity">
      <summary>
            Called during <see cref="M:Celeste.Level.LoadCustomEntity(Celeste.EntityData,Celeste.Level)" />.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.IsHeadless">
      <summary>
            Is Everest running headlessly?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.IsMono">
      <summary>
            Is the game running using Mono?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.IsMobile">
      <summary>
            Is the game running on a mobile platform, f.e. Android?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.IsAndroid">
      <summary>
            Is the game running on Android?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.IsFNADroid">
      <summary>
            Is the game running using FNADroid?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.AvoidRenderTargets">
      <summary>
            Should the game avoid creating render targets if possible?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.PreferLazyLoading">
      <summary>
            Does the environment (platform, ...) prefer lazy loading?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.SupportRuntimeMods">
      <summary>
            Does the environment (platform, ...) support loading runtime mods?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.SupportRelinkingMods">
      <summary>
            Does the environment (platform, ...) support relinking runtime mods?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Flags.SupportUpdatingEverest">
      <summary>
            Does the environment (platform, ...) support updating Everest?
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathMods">
      <summary>
            The path to the Everest /Mods directory.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathCache">
      <summary>
            The path to the Everest /Mods/Cache directory.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathBlacklist">
      <summary>
            The path to the Everest /Mods/blacklist.txt file.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.Blacklist">
      <summary>
            The currently loaded mod blacklist.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathWhitelist">
      <summary>
            The path to the Everest /Mods/whitelist.txt file.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.Whitelist">
      <summary>
            The currently loaded mod whitelist.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathModOptionsOrder">
      <summary>
            The path to the Everest /Mods/modoptionsorder.txt file.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.ModOptionsOrder">
      <summary>
            The currently loaded mod mod options order.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.PathUpdaterBlacklist">
      <summary>
            The path to the Everest /Mods/updaterblacklist.txt file.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Loader.UpdaterBlacklist">
      <summary>
            The currently loaded mod updater blacklist.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Loader.PermanentBlacklist">
      <summary>
            All mods on this list with a version lower than the specified version will never load.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Loader.PermanentConflictlist">
      <summary>
            When both mods in the same row with versions lower than in the row are present, yell at the user.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.LoadZip(System.String)">
      <summary>
            Load a mod from a .zip archive at runtime.
            </summary>
      <param name="archive">The path to the mod .zip archive.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.LoadDir(System.String)">
      <summary>
            Load a mod from a directory at runtime.
            </summary>
      <param name="dir">The path to the mod directory.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.LoadModDelayed(Celeste.Mod.EverestModuleMetadata,System.Action)">
      <summary>
            Load a mod .dll given its metadata at runtime. Doesn't load the mod content.
            If required, loads the mod after all of its dependencies have been loaded.
            </summary>
      <param name="meta">Metadata of the mod to load.</param>
      <param name="callback">Callback to be executed after the mod has been loaded. Executed immediately if meta == null.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.LoadMod(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Load a mod .dll given its metadata at runtime. Doesn't load the mod content.
            </summary>
      <param name="meta">Metadata of the mod to load.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.LoadModAssembly(Celeste.Mod.EverestModuleMetadata,System.Reflection.Assembly)">
      <summary>
            Find and load all EverestModules in the given assembly.
            </summary>
      <param name="meta">The mod metadata, preferably from the mod metadata.yaml file.</param>
      <param name="asm">The mod assembly, preferably relinked.</param>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.DependenciesLoaded(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Checks if all dependencies are loaded.
            Can be used by mods manually to f.e. activate / disable functionality.
            </summary>
      <param name="meta">The metadata of the mod listing the dependencies.</param>
      <returns>True if the dependencies have already been loaded by Everest, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.DependencyLoaded(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Checks if an dependency is loaded.
            Can be used by mods manually to f.e. activate / disable functionality.
            </summary>
      <param name="dep">Dependency to check for. Name and Version will be checked.</param>
      <returns>True if the dependency has already been loaded by Everest, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Loader.VersionSatisfiesDependency(System.Version,System.Version)">
      <summary>
            Checks if the given version number is "compatible" with the one required as a dependency.
            </summary>
      <param name="requiredVersion">The version required by a mod in their dependencies</param>
      <param name="installedVersion">The version to check for</param>
      <returns>true if the versions number are compatible, false otherwise.</returns>
    </member>
    <member name="T:Celeste.Mod.Everest.Relinker">
      <summary>
            Relink mods to point towards Celeste.exe and FNA / XNA properly at runtime.
            </summary>
    </member>
    <member name="F:Celeste.Mod.Everest.Relinker.ChecksumHasher">
      <summary>
            The hasher used by Relinker.
            </summary>
    </member>
    <member name="P:Celeste.Mod.Everest.Relinker.GameChecksum">
      <summary>
            The current Celeste.exe's checksum.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetRelinkedAssembly(Celeste.Mod.EverestModuleMetadata,System.IO.Stream,MonoMod.MissingDependencyResolver,System.String[],System.Action{MonoMod.MonoModder})">
      <summary>
            Relink a .dll to point towards Celeste.exe and FNA / XNA properly at runtime, then load it.
            </summary>
      <param name="meta">The mod metadata, used for caching, among other things.</param>
      <param name="stream">The stream to read the .dll from.</param>
      <param name="depResolver">An optional dependency resolver.</param>
      <param name="checksumsExtra">Any optional checksums</param>
      <param name="prePatch">An optional step executed before patching, but after MonoMod has loaded the input assembly.</param>
      <returns>The loaded, relinked assembly.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetRelinkedAssembly(Celeste.Mod.EverestModuleMetadata,System.String,System.IO.Stream,MonoMod.MissingDependencyResolver,System.String[],System.Action{MonoMod.MonoModder})">
      <summary>
            Relink a .dll to point towards Celeste.exe and FNA / XNA properly at runtime, then load it.
            </summary>
      <param name="meta">The mod metadata, used for caching, among other things.</param>
      <param name="asmname" />
      <param name="stream">The stream to read the .dll from.</param>
      <param name="depResolver">An optional dependency resolver.</param>
      <param name="checksumsExtra">Any optional checksums</param>
      <param name="prePatch">An optional step executed before patching, but after MonoMod has loaded the input assembly.</param>
      <returns>The loaded, relinked assembly.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetCachedPath(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Get the cached path of a given mod's relinked .dll
            </summary>
      <param name="meta">The mod metadata.</param>
      <returns>The full path to the cached relinked .dll</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetCachedPath(Celeste.Mod.EverestModuleMetadata,System.String)">
      <summary>
            Get the cached path of a given mod's relinked .dll
            </summary>
      <param name="meta">The mod metadata.</param>
      <param name="asmname" />
      <returns>The full path to the cached relinked .dll</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetChecksum(Celeste.Mod.EverestModuleMetadata)">
      <summary>
            Get the checksum for a given mod's .dll or the containing .zip
            </summary>
      <param name="meta">The mod metadata.</param>
      <returns>A checksum.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.GetChecksum(System.String)">
      <summary>
            Get the checksum for a given file.
            </summary>
      <param name="path">The file path.</param>
      <returns>A checksum.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Relinker.ChecksumsEqual(System.String[],System.String[])">
      <summary>
            Determine if both checksum collections are equal.
            </summary>
      <param name="a">The first checksum array.</param>
      <param name="b">The second checksum array.</param>
      <returns>True if the contents of both arrays match, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.Everest.Updater.DownloadFileWithProgress(System.String,System.String,System.Func{System.Int32,System.Int64,System.Int32,System.Boolean})">
      <summary>
            Downloads a file and calls the progressCallback parameter periodically with progress information.
            This can be used to display the download progress on screen.
            </summary>
      <param name="url">The URL to download the file from</param>
      <param name="destPath">The path the file should be downloaded to</param>
      <param name="progressCallback">A method called periodically as the download progresses. Parameters are progress, length and speed in KiB/s.
            Should return true for the download to continue, false for it to be cancelled.</param>
    </member>
    <member name="M:Celeste.Mod.Extensions.ExtractStream(Ionic.Zip.ZipEntry)">
      <summary>
            Create a new MemoryStream for a given ZipEntry, which is safe to use in outside contexts.
            </summary>
      <param name="entry">The input ZipEntry.</param>
      <returns>The MemoryStream holding the extracted data of the ZipEntry.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.ToHexadecimalString(System.Byte[])">
      <summary>
            Create a hexadecimal string for the given bytes.
            </summary>
      <param name="data">The input bytes.</param>
      <returns>The output hexadecimal string.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.InvokePassing``1(System.MulticastDelegate,``0,System.Object[])">
      <summary>
            Invokes all delegates in the invocation list, passing on the result to the next.
            </summary>
      <typeparam name="T">Type of the result.</typeparam>
      <param name="md">The multicast delegate.</param>
      <param name="val">The initial value and first parameter.</param>
      <param name="args">Any other arguments that may be passed.</param>
      <returns>The result of all delegates.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.InvokeWhileTrue(System.MulticastDelegate,System.Object[])">
      <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns true.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Extensions.InvokeWhileFalse(System.MulticastDelegate,System.Object[])">
      <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns false.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Extensions.InvokeWhileNull``1(System.MulticastDelegate,System.Object[])">
      <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns null.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Extensions.SpacedPascalCase(System.String)">
      <summary>
            Split PascalCase words to become Pascal Case instead.
            </summary>
      <param name="input">PascalCaseString</param>
      <returns>Pascal Case String</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.DialogKeyify(System.String)">
      <summary>
            Escape some common strings from a given string for usage with the Dialog class.
            The following characters get replaced with an underscore: /-+
            </summary>
      <param name="input">The input string.</param>
      <returns>The Dialog-compatible key.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.DialogClean(System.String,Celeste.Language)">
      <summary>
            Get the dialog string for the given input key.
            </summary>
      <param name="input">The dialog key.</param>
      <param name="language" />
      <returns>The resolved dialog string.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.DialogCleanOrNull(System.String,Celeste.Language)">
      <summary>
            Get the dialog string for the given input key.
            </summary>
      <param name="input">The dialog key.</param>
      <param name="language" />
      <returns>The resolved dialog string or null.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.ToVector2(Microsoft.Xna.Framework.Point)">
      <summary>
            Get a Vector2 from a Point.
            </summary>
      <param name="p">The input Point.</param>
      <returns>The output Vector2.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.ToVector2(System.Single[])">
      <summary>
            Get a Vector2 from any float[] with a length of 2.
            </summary>
      <param name="a">The input array.</param>
      <returns>The output Vector2 or null if the length doesn't match.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.ToVector3(System.Single[])">
      <summary>
            Get a Vector3 from any float[] with a length of 3.
            </summary>
      <param name="a">The input array.</param>
      <returns>The output Vector3 or null if the length doesn't match.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.NeedsRelaunch(Celeste.TextMenu.Item,Celeste.TextMenu,System.Boolean)">
      <summary>
            Add an Enter and Leave handler, notifying the user that a relaunch is required to apply the changes.
            </summary>
      <param name="option">The input TextMenu.Item option.</param>
      <param name="containingMenu">The menu containing the TextMenu.Item option.</param>
      <param name="needsRelaunch">This method does nothing if this is set to false.</param>
      <returns>The passed option.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.AddDescription(Celeste.TextMenu.Item,Celeste.TextMenu,System.String)">
      <summary>
            Add an Enter and Leave handler, displaying a description if selected.
            </summary>
      <param name="option">The input TextMenu.Item option.</param>
      <param name="containingMenu">The menu containing the TextMenu.Item option.</param>
      <param name="description" />
      <returns>The passed option.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)">
      <summary>
            Write the string to the BinaryWriter in a C-friendly format.
            </summary>
      <param name="stream">The output which the method writes to.</param>
      <param name="text">The input string.</param>
    </member>
    <member name="M:Celeste.Mod.Extensions.CastDelegate(System.Delegate,System.Type)">
      <summary>
            Cast a delegate from one type to another. Compatible with delegates holding an invocation list (combined delegates).
            </summary>
      <param name="source">The input delegate.</param>
      <param name="type">The wanted output delegate type.</param>
      <returns>The output delegate.</returns>
    </member>
    <member name="M:Celeste.Mod.Extensions.AddButtons(Monocle.VirtualButton_InputV2,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Map the list of buttons to the given virtual button.
            </summary>
      <param name="vbtn">The virtual button to map the buttons to.</param>
      <param name="buttons">The buttons to map.</param>
    </member>
    <member name="M:Celeste.Mod.Extensions.IsDown(Microsoft.Xna.Framework.Input.Touch.TouchLocationState)">
      <summary>
            Is the given touch state "down" (pressed or moved)?
            </summary>
    </member>
    <member name="M:Celeste.Mod.Extensions.IsUp(Microsoft.Xna.Framework.Input.Touch.TouchLocationState)">
      <summary>
            Is the given touch state "up" (released or invalid)?
            </summary>
    </member>
    <member name="M:Celeste.Mod.Logger.SetLogLevel(System.String,Celeste.Mod.LogLevel)">
      <summary>
            Sets the minimum log level to be written in the logs for lines matching the given tag prefix.
            <br />
            When using this, make sure the tag prefix is restrictive enough not to impact other mods
            (for example, if all your tags follow the format MyMod/xxx, use "MyMod/" as a prefix).
            </summary>
      <param name="tagPrefix">The prefix of the log tags to affect with this log level</param>
      <param name="minimumLevel">The minimum level of logs to print out in the logs</param>
    </member>
    <member name="M:Celeste.Mod.Logger.GetLogLevel(System.String)">
      <summary>
            Gets the minimum log level that will be written in log.txt for the given tag.
            </summary>
      <param name="tag">The tag to get the minimum log level for</param>
      <returns>The minimum log level for this tag</returns>
    </member>
    <member name="M:Celeste.Mod.Logger.Log(System.String,System.String)">
      <summary>
            Log a string to the console and to log.txt
            </summary>
      <param name="tag">The tag, preferably short enough to identify your mod, but not too long to clutter the log.</param>
      <param name="str">The string / message to log.</param>
    </member>
    <member name="M:Celeste.Mod.Logger.Log(Celeste.Mod.LogLevel,System.String,System.String)">
      <summary>
            Log a string to the console and to log.txt
            </summary>
      <param name="level">The log level.</param>
      <param name="tag">The tag, preferably short enough to identify your mod, but not too long to clutter the log.</param>
      <param name="str">The string / message to log.</param>
    </member>
    <member name="M:Celeste.Mod.Logger.LogDetailed(System.String,System.String)">
      <summary>
            Log a string to the console and to log.txt, including a call stack trace.
            </summary>
      <param name="tag">The tag, preferably short enough to identify your mod, but not too long to clutter the log.</param>
      <param name="str">The string / message to log.</param>
    </member>
    <member name="M:Celeste.Mod.Logger.LogDetailed(Celeste.Mod.LogLevel,System.String,System.String)">
      <summary>
            Log a string to the console and to log.txt, including a call stack trace.
            </summary>
      <param name="level">The log level.</param>
      <param name="tag">The tag, preferably short enough to identify your mod, but not too long to clutter the log.</param>
      <param name="str">The string / message to log.</param>
    </member>
    <member name="M:Celeste.Mod.Logger.LogDetailed(System.Exception,System.String)">
      <summary>
            Print the exception to the console, including extended loading / reflection data useful for mods.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.Source">
      <summary>
            The mod asset's source.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.Type">
      <summary>
            The type matching the mod asset.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.Format">
      <summary>
            The original file extension.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.PathVirtual">
      <summary>
            The virtual / mapped asset path.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.Children">
      <summary>
            The "children" assets in f.e. directory type "assets."
            </summary>
    </member>
    <member name="F:Celeste.Mod.ModAsset.Targets">
      <summary>
            A set of all objects affected by this mod asset.
            </summary>
    </member>
    <member name="P:Celeste.Mod.ModAsset.Stream">
      <summary>
            A stream to read the asset data from.
            </summary>
    </member>
    <member name="P:Celeste.Mod.ModAsset.Data">
      <summary>
            The contents of the asset.
            </summary>
    </member>
    <member name="M:Celeste.Mod.ModAsset.Open(System.IO.Stream@,System.Boolean@)">
      <summary>
            Open a stream to read the asset data from.
            </summary>
      <param name="stream">The resulting stream.</param>
      <param name="isSection">Is the stream already a section (SectionOffset and SectionLength)?</param>
    </member>
    <member name="M:Celeste.Mod.ModAsset.TryDeserialize``1(``0@)">
      <summary>
            Deserialize the asset using a deserializer based on the AssetType (f.e. AssetTypeYaml -&gt; YamlDotNet).
            </summary>
      <typeparam name="T">The target type.</typeparam>
      <param name="result">The asset in its deserialized (object) form.</param>
      <returns>True if deserializing the asset succeeded, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.ModAsset.Deserialize``1">
      <summary>
            Deserialize the asset using a deserializer based on the AssetType (f.e. AssetTypeYaml -&gt; YamlDotNet).
            </summary>
      <typeparam name="T">The target type.</typeparam>
      <returns>The asset in its deserialized (object) form or default(T).</returns>
    </member>
    <member name="M:Celeste.Mod.ModAsset.TryGetMeta``1(``0@)">
      <summary>
            Deserialize this asset's matching .meta asset. Uses TryDeserialize internally.
            </summary>
      <typeparam name="T">The target meta type.</typeparam>
      <param name="meta">The requested meta object.</param>
      <returns>True if deserializing the meta asset succeeded, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.ModAsset.GetMeta``1">
      <summary>
            Deserialize this asset's matching .meta asset. Uses TryDeserialize internally.
            </summary>
      <typeparam name="T">The target meta type.</typeparam>
      <returns>The requested meta object or default(T).</returns>
    </member>
    <member name="M:Celeste.Mod.ModAsset.GetCachedPath">
      <summary>
            Cache the file and return a cached path.
            </summary>
      <returns>The cached file path.</returns>
    </member>
    <member name="F:Celeste.Mod.FileSystemModAsset.Path">
      <summary>
            The path to the source file.
            </summary>
    </member>
    <member name="F:Celeste.Mod.MapBinsInModsModAsset.Path">
      <summary>
            The path to the source file.
            </summary>
    </member>
    <member name="F:Celeste.Mod.AssemblyModAsset.ResourceName">
      <summary>
            The name of the resource in the assembly.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ZipModAsset.Path">
      <summary>
            The path to the source file inside the archive.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ZipModAsset.Entry">
      <summary>
            The entry for the source file inside the archive.
            </summary>
    </member>
    <member name="T:Celeste.Mod.TextInput">
      <summary>
            Class containing a text input event for your mods.
            Uses FNA's TextInputEXT if available, falling back to a WinForms hook.
            </summary>
    </member>
    <member name="E:Celeste.Mod.TextInput.OnInput">
      <summary>
            Invoked whenever text input occurs, including some "input action" characters.
            Take a look at the FNA TextInputExt documentation for more info: https://github.com/FNA-XNA/FNA/wiki/5:-FNA-Extensions#textinputext
            </summary>
    </member>
    <member name="T:Celeste.Mod.Helpers.DirectoryProxy">
      <summary>
            Partial replacement for the System.IO.Directory class.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.DiscordRpc.RichPresence.GetStruct">
      <summary>
            Get the <see cref="T:Celeste.Mod.Helpers.DiscordRpc.RichPresenceStruct" /> reprensentation of this instance
            </summary>
      <returns>
        <see cref="T:Celeste.Mod.Helpers.DiscordRpc.RichPresenceStruct" /> reprensentation of this instance</returns>
    </member>
    <member name="M:Celeste.Mod.Helpers.DiscordRpc.RichPresence.StrToPtr(System.String,System.Int32)">
      <summary>
            Returns a pointer to a representation of the given string with a size of maxbytes
            </summary>
      <param name="input">String to convert</param>
      <param name="maxbytes">Max number of bytes to use</param>
      <returns>Pointer to the UTF-8 representation of input</returns>
    </member>
    <member name="M:Celeste.Mod.Helpers.DiscordRpc.RichPresence.StrToUtf8NullTerm(System.String)">
      <summary>
            Convert string to UTF-8 and add null termination
            </summary>
      <param name="toconv">string to convert</param>
      <returns>UTF-8 representation of toconv with added null termination</returns>
    </member>
    <member name="M:Celeste.Mod.Helpers.DiscordRpc.RichPresence.StrClampBytes(System.String,System.Int32)">
      <summary>
            Clamp the string to the given byte length preserving null termination
            </summary>
      <param name="toclamp">string to clamp</param>
      <param name="maxbytes">max bytes the resulting string should have (including null termination)</param>
      <returns>null terminated string with a byte length less or equal to maxbytes</returns>
    </member>
    <member name="M:Celeste.Mod.Helpers.DiscordRpc.RichPresence.FreeMem">
      <summary>
            Free the allocated memory for conversion to <see cref="T:Celeste.Mod.Helpers.DiscordRpc.RichPresenceStruct" /></summary>
    </member>
    <member name="T:Celeste.Mod.Helpers.FileProxy">
      <summary>
            Partial replacement for the System.IO.File class.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.DownloadModUpdateList">
      <summary>
            Downloads the full update list from the update checker server.
            Returns null if the download fails for any reason.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.ListAvailableUpdates(System.Collections.Generic.Dictionary{System.String,Celeste.Mod.Helpers.ModUpdateInfo},System.Boolean)">
      <summary>
            List all mods needing an update, by comparing the installed mods' hashes with the ones in the update checker database.
            </summary>
      <param name="updateCatalog">The update checker database (must not be null!)</param>
      <param name="excludeBlacklist">If mods present in updaterblacklist.txt should be excluded from the result</param>
      <returns>A map listing all the updates: info from the update checker database =&gt; info from the installed mod</returns>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.VerifyChecksum(Celeste.Mod.Helpers.ModUpdateInfo,System.String)">
      <summary>
            Verifies the downloaded mod's checksum, and throws an IOException if it doesn't match the database one.
            </summary>
      <param name="update">The mod info from the database</param>
      <param name="filePath">The path to the file to check</param>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.InstallModUpdate(Celeste.Mod.Helpers.ModUpdateInfo,Celeste.Mod.EverestModuleMetadata,System.String)">
      <summary>
            Installs a mod update in the Mods directory once it has been downloaded.
            This method will replace the installed mod zip with the one that was just downloaded.
            </summary>
      <param name="update">The update info coming from the update server</param>
      <param name="mod">The mod metadata from Everest for the installed mod</param>
      <param name="zipPath">The path to the zip the update has been downloaded to</param>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.TryDelete(System.String)">
      <summary>
            Tries deleting a file if it exists.
            If deletion fails, an error is written to the log.
            </summary>
      <param name="path">The path to the file to delete</param>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.getModUpdaterDatabaseUrl">
      <summary>
            Retrieves the mod updater database location from everestapi.github.io.
            This should point to a running instance of https://github.com/max4805/EverestUpdateCheckerServer.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.RunAsyncCheckForModUpdates(System.Boolean)">
      <summary>
            Run a check for mod updates asynchronously.
            <param name="excludeBlacklist">If mods present in updaterblacklist.txt should be excluded from the result</param></summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.IsAsyncUpdateCheckingDone">
      <summary>
            Returns true if update checking is done, false otherwise.
            </summary>
    </member>
    <member name="M:Celeste.Mod.Helpers.ModUpdaterHelper.GetAsyncLoadedModUpdates">
      <summary>
            Returns the mod updates retrieved by RunCheckForModUpdates().
            Waits for the end of the task if it is not over yet.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SafeRoutine">
      <summary>
            Wrapper class for IEnumerators which perform mission-critical operations and thus
            should continue running in the background, even when the entity has been removed.
            </summary>
    </member>
    <member name="M:Celeste.Mod.YamlHelper.DeserializerUsing(System.Object)">
      <summary>
            Builds a deserializer that will provide YamlDotNet with the given object instead of creating a new one.
            This will make YamlDotNet update this object when deserializing.
            </summary>
      <param name="objectToBind">The object to set fields on</param>
      <returns>The newly-created deserializer</returns>
    </member>
    <member name="T:Celeste.Mod.EverestModule">
      <summary>
            Your Everest main mod class inherits from this class.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule.Metadata">
      <summary>
            Used by Everest itself to store any module metadata.
            
            The metadata is usually parsed from meta.yaml in the archive.
            
            You can override this property to provide dynamic metadata at runtime.
            Note that this doesn't affect mod loading.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule.SettingsType">
      <summary>
            The type used for the settings object. Used for serialization, among other things.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule._Settings">
      <summary>
            Any settings stored across runs. Everest loads this before Load gets invoked.
            Define your custom property returning _Settings typecasted as your custom settings type.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.LoadSettings">
      <summary>
            Load the mod settings. Loads the settings from {UserIO.GetSavePath("Saves")}/modsettings-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.SaveSettings">
      <summary>
            Save the mod settings. Saves the settings to {UserIO.GetSavePath("Saves")}/modsettings-{Metadata.Name}.yaml by default.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule.SaveDataType">
      <summary>
            The type used for the save data object. Used for serialization, among other things.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule._SaveData">
      <summary>
            Any save data stored across runs.
            Define your custom property returning _SaveData typecasted as your custom save data type.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.LoadSaveData(System.Int32)">
      <summary>
            Load the mod save data. Loads the save data from {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsave-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.SaveSaveData(System.Int32)">
      <summary>
            Save the mod save data. Saves the save data to {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsave-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.DeleteSaveData(System.Int32)">
      <summary>
            Delete the mod save data. Deletes the save data at {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsave-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule.SessionType">
      <summary>
            The type used for the session object. Used for serialization, among other things.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModule._Session">
      <summary>
            Any save data stored for the current session.
            Define your custom property returning _Session typecasted as your custom session type.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.LoadSession(System.Int32,System.Boolean)">
      <summary>
            Load the mod session. Loads the session from {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsession-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.SaveSession(System.Int32)">
      <summary>
            Save the mod session. Saves the session to {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsession-{Metadata.Name}.celeste by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.DeleteSession(System.Int32)">
      <summary>
            Delete the mod session. Deletes the session at {UserIO.GetSavePath("Saves")}/{SaveData.GetFilename(index)}-modsession-{Metadata.Name}.celeste by default.
            </summary>
      <param name="index" />
    </member>
    <member name="M:Celeste.Mod.EverestModule.Load">
      <summary>
            Perform any initializing actions after all mods have been loaded.
            Do not depend on any specific order in which the mods get initialized.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.Initialize">
      <summary>
            Perform any initializing actions after Celeste.Initialize has been called.
            Do not depend on any specific order in which the mods get initialized.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.LoadContent">
      <summary>
            Perform any content loading actions after Celeste.LoadContent has been called.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.LoadContent(System.Boolean)">
      <summary>
            Perform any content loading actions after Celeste.LoadContent has been called.
            </summary>
      <param name="firstLoad">Is this the first load?</param>
    </member>
    <member name="M:Celeste.Mod.EverestModule.Unload">
      <summary>
            Unload any unmanaged resources allocated by the mod (f.e. textures) and
            undo any changes performed by the mod.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModule.ParseArg(System.String,System.Collections.Generic.Queue{System.String})">
      <summary>
            Parse the current command-line argument and any follow-ups.
            </summary>
      <param name="arg">The current command line argument.</param>
      <param name="args">Any further arguments the mod may want to dequeue and parse.</param>
      <returns>True if the argument "belongs" to the mod, false otherwise.</returns>
    </member>
    <member name="M:Celeste.Mod.EverestModule.CreateModMenuSection(Celeste.TextMenu,System.Boolean,FMOD.Studio.EventInstance)">
      <summary>
            Create the mod menu subsection including the section header in the given menu.
            The default implementation uses reflection to attempt creating a menu.
            </summary>
      <param name="menu">Menu to add the section to.</param>
      <param name="inGame">Whether we're in-game (paused) or in the main menu.</param>
      <param name="snapshot">The Level.PauseSnapshot</param>
    </member>
    <member name="M:Celeste.Mod.EverestModule.PrepareMapDataProcessors(Celeste.Mod.MapDataFixup)">
      <summary>
            Create and add any map data processors to the given context, if any are needed.
            </summary>
      <param name="context">The context to add the processors to.</param>
    </member>
    <member name="T:Celeste.Mod.EverestModuleBinarySaveData">
      <summary>
            Per-save-slot mod data, binary formatted.
            Everest loads / saves this for you as .bin by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySaveData.Read(System.IO.BinaryReader)">
      <summary>
            Read the save data from the given BinaryReader to the current object.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySaveData.Write(System.IO.BinaryWriter)">
      <summary>
            Write the save data from the current object to the given BinaryWriter.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleBinarySession">
      <summary>
            Per-session mod data, binary formatted.
            Everest loads / saves this for you as .bin by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySession.Read(System.IO.BinaryReader)">
      <summary>
            Read the session from the given BinaryReader to the current object.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySession.Write(System.IO.BinaryWriter)">
      <summary>
            Write the session from the current object to the given BinaryWriter.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleBinarySettings">
      <summary>
            Global mod settings, binary formatted, which will show up in the mod options menu.
            Everest loads / saves this for you as .bin by default.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySettings.Read(System.IO.BinaryReader)">
      <summary>
            Read the settings from the given BinaryReader to the current object.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleBinarySettings.Write(System.IO.BinaryWriter)">
      <summary>
            Write the settings from the current object to the given BinaryWriter.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleMetadata">
      <summary>
            Any module metadata, usually mirroring the data in your metadata.yaml
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.Multimeta">
      <summary>
            The collection of mod metadatas this mod metadata is part of. Set at runtime.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.PathArchive">
      <summary>
            The path to the ZIP of the mod. In case of unzipped mods, an empty string. Set at runtime.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.PathDirectory">
      <summary>
            The path to the directory of the mod. In case of .zips, an empty string. Set at runtime.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.Name">
      <summary>
            The name of the mod.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.Version">
      <summary>
            The mod version.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.DLL">
      <summary>
            The path of the mod .dll inside the ZIP or the absolute DLL path if in a directory.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.Dependencies">
      <summary>
            The dependencies of the mod.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.OptionalDependencies">
      <summary>
            The optional dependencies of the mod. This mod will load after the mods listed here if they are installed; if they aren't, the mod will load anyway.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.Hash">
      <summary>
            The runtime mod hash. Might not be determined by all mod content.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleMetadata.SupportsCodeReload">
      <summary>
            Whether this module supports experimental live code reloading or not.
            </summary>
    </member>
    <member name="M:Celeste.Mod.EverestModuleMetadata.PostParse">
      <summary>
            Perform a few basic post-parsing operations. For example, make the DLL path absolute if the mod is in a directory.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleSaveData">
      <summary>
            Per-save-slot mod data.
            Everest loads / saves this for you as .yaml by default.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleSaveData.Index">
      <summary>
            The save data index. Assigned by Everest itself when loading it.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleSession">
      <summary>
            Per-session mod data.
            Everest loads / saves this for you as .yaml by default.
            </summary>
    </member>
    <member name="P:Celeste.Mod.EverestModuleSession.Index">
      <summary>
            The save data index. Assigned by Everest itself when loading it.
            </summary>
    </member>
    <member name="T:Celeste.Mod.EverestModuleSettings">
      <summary>
            Global mod settings, which will show up in the mod options menu.
            Everest loads / saves this for you as .yaml by default.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingNameAttribute">
      <summary>
            The dialog key / name for the settings option.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingInGameAttribute">
      <summary>
            Whether the option should be shown in-game or in the main menu only.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingRangeAttribute">
      <summary>
            The integer option range.
            If largeRange is set to true, a slider optimized for large integer ranges (going through values at an increasing speed) will be used.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingMaxLengthAttribute">
      <summary>
            Allows to set the maximum length of string settings.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingNumberInputAttribute">
      <summary>
            Shows a button that will open a number input screen. Supported on int and float properties.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingNeedsRelaunchAttribute">
      <summary>
            Any options with this attribute will notify the user that a restart is required to apply the changes.
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingSubTextAttribute">
      <summary>
            Add a description shown when the setting is selected
            </summary>
    </member>
    <member name="T:Celeste.Mod.SettingIgnoreAttribute">
      <summary>
            Ignore the setting in the default mod options menu handler.
            </summary>
    </member>
    <member name="T:Celeste.Mod.DecalRegistry">
      <summary>
            Allows custom decals to have properties that are otherwise hardcoded, such as reflections, parallax, etc.
            </summary>
    </member>
    <member name="M:Celeste.Mod.DecalRegistry.ReadDecalRegistryXml(System.String)">
      <summary>
            Reads a DecalRegistry.xml file's contents
            </summary>
    </member>
    <member name="F:Celeste.Mod.DecalRegistry.DecalInfo.CustomProperties">
      <summary>
            PropertyName -&gt; AttributeCollection
            </summary>
    </member>
    <member name="T:Celeste.Mod.IStrawberry">
      <summary>
            All registered Strawberries must implement the IStrawberry interface.
            This enables the Strawberry Registry and its related modifications
            to do the heavy lifting painlessly.
            </summary>
    </member>
    <member name="T:Celeste.Mod.IStrawberrySeeded">
      <summary>
            If your strawberry has seeds and you want to use GenericStrawberrySeed,
            implement this interface. Everest will do the rest.
            </summary>
    </member>
    <member name="T:Celeste.Mod.StrawberryRegistry">
      <summary>
            Allows mods to register their own strawberry-type collectible objects.<para />
            Registered strawberries can be tracked or secret, and will attempt to autocollect when appropriate e.g. level end.
            </summary>
    </member>
    <member name="T:Celeste.Mod.ATouchRegion">
      <summary>
            The base class for all Everest touch regions.
            </summary>
    </member>
    <member name="F:Celeste.Mod.ATouchRegion.Position">
      <summary>
            Center position of your touch region in UI-space (1920x1080).
            </summary>
    </member>
    <member name="F:Celeste.Mod.ATouchRegion.Size">
      <summary>
            Size of your touch region in UI-space (1920x1080).
            </summary>
    </member>
    <member name="P:Celeste.Mod.ATouchRegion.Touch">
      <summary>
            The currently registered touch in the region.
            </summary>
    </member>
    <member name="P:Celeste.Mod.ATouchRegion.TouchPrev">
      <summary>
            The previously registered touch in the region.
            </summary>
    </member>
    <member name="T:Celeste.Mod.TouchRegion">
      <summary>
            Basic touch regions. If you want to render fully custom regions, override ATouchRegion instead.
            </summary>
    </member>
    <member name="T:Celeste.Mod.UI.BlackScreen">
      <summary>
            A Scene that forces the screen to be black.
            </summary>
    </member>
    <member name="T:Celeste.Mod.UI.OuiFileSelectSlotSubmenu">
      <summary>
            Just a handy wrapper on OuiGenericMenu for OuiFileSelectSlot submenus specifically.
            </summary>
    </member>
    <member name="T:Celeste.Mod.UI.OuiGenericMenu">
      <summary>
            A generic menu screen, showing options.
            </summary>
    </member>
    <member name="F:Celeste.Mod.UI.OuiGenericMenu.menu">
      <summary>
            The text menu this screen contains.
            </summary>
    </member>
    <member name="P:Celeste.Mod.UI.OuiGenericMenu.MenuName">
      <summary>
            The title for the menu.
            </summary>
    </member>
    <member name="F:Celeste.Mod.UI.OuiGenericMenu.parameters">
      <summary>
            Optional parameters this menu can take.
            </summary>
    </member>
    <member name="F:Celeste.Mod.UI.OuiGenericMenu.backToParentMenu">
      <summary>
            An action executed when the player presses Back.
            </summary>
    </member>
    <member name="F:Celeste.Mod.UI.OuiGenericMenu.canGoBack">
      <summary>
            Whether the player can go back to the parent menu.
            </summary>
    </member>
    <member name="M:Celeste.Mod.UI.OuiGenericMenu.addOptionsToMenu(Celeste.TextMenu)">
      <summary>
            Adds all the submenu options to the TextMenu given in parameter.
            </summary>
    </member>
    <member name="M:Celeste.Mod.UI.OuiGenericMenu.Goto``1(System.Action{Celeste.Overworld},System.Object[])">
      <summary>
            Navigates from the current screen to a OuiGenericMenu <b>in the overworld</b>. Does NOT work from the pause menu.
            </summary>
      <typeparam name="T">The OuiGenericMenu to navigate to</typeparam>
      <param name="backToParentMenu">An action to come back to the current menu (generally <code>overworld.Goto&lt;ParentMenuType&gt;()</code></param>
      <param name="parameters">Optional parameters the menu will get in its "options" attribute</param>
    </member>
    <member name="T:Celeste.Mod.UI.OuiModOptions.ISubmenu">
      <summary>
            Interface used to "tag" mod options submenus.
            </summary>
    </member>
    <member name="M:Celeste.Mod.UI.OuiModOptions.createModMenuSectionAndDelete(System.Collections.Generic.List{Celeste.Mod.EverestModule},System.Predicate{Celeste.Mod.EverestModule},Celeste.TextMenu,System.Boolean,FMOD.Studio.EventInstance)">
      <summary>
            Adds the mod menu section for the first element of 'modules' that matches 'criteria',
            then removes it from the 'modules' list.
            </summary>
      <returns>true if an element matching 'criteria' was found, false otherwise.</returns>
    </member>
    <member name="T:Celeste.Mod.UI.OuiTextEntry">
      <summary>
            Wrapper of <see cref="T:Celeste.Mod.UI.OuiModOptionString" /> for consistent naming
            </summary>
    </member>
    <member name="M:Celeste.Mod.UI.OuiModUpdateList.downloadModUpdate(Celeste.Mod.Helpers.ModUpdateInfo,Celeste.Mod.EverestModuleMetadata,Celeste.TextMenu.Button)">
      <summary>
            Downloads and installs a mod update.
            </summary>
      <param name="update">The update info coming from the update server</param>
      <param name="mod">The mod metadata from Everest for the installed mod</param>
      <param name="button">The button for that mod shown on the interface</param>
    </member>
    <member name="M:Celeste.Mod.UI.OuiModUpdateList.doDownloadModUpdate(Celeste.Mod.Helpers.ModUpdateInfo,Celeste.Mod.EverestModuleMetadata,Celeste.TextMenu.Button)">
      <summary>
            Does the actual downloading of the mod. This is it's own function, to avoid double code
            </summary>
      <param name="update">The update info coming from the update server</param>
      <param name="mod">The mod metadata from Everest for the installed mod</param>
      <param name="button">The button for that mod shown on the interface</param>
      <returns>Bool wether the update failed or not</returns>
    </member>
    <member name="M:Celeste.Mod.UI.OuiModUpdateList.downloadMod(Celeste.Mod.Helpers.ModUpdateInfo,Celeste.TextMenu.Button,System.String)">
      <summary>
            Downloads a mod update.
            </summary>
      <param name="update">The update info coming from the update server</param>
      <param name="button">The button for that mod shown on the interface</param>
      <param name="zipPath">The path to the zip the update will be downloaded to</param>
    </member>
    <member name="M:Celeste.Mod.UI.OuiModUpdateList.downloadAllMods">
      <summary>
            Downloads all automatically updatable mods
            </summary>
    </member>
    <member name="T:Celeste.Mod.UI.OuiNumberEntry">
      <summary>
            Modification of <see cref="T:Celeste.Mod.UI.OuiModOptionString" /> to handle numeric input.
            </summary>
    </member>
    <member name="M:Celeste.Mod.UI.OuiNumberEntry.Init``1(System.Single,System.Action{System.Single},System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Sets up the OuiNumberEntry screen.
            </summary>
      <typeparam name="T">Oui to return to on exit</typeparam>
      <param name="value">Initial value</param>
      <param name="onValueChange">Action to be called when a new value is set.</param>
      <param name="maxValueLength">The number of digits allowed, excluding "-" and "."</param>
      <param name="allowDecimals">If decimal numbers should be allowed</param>
      <param name="allowNegatives">If negative numbers should be allowed</param>
      <returns />
    </member>
    <member name="T:Celeste.TextMenuExt.EaseInSubHeaderExt">
      <summary>
            Sub-header that eases in/out when FadeVisible is changed.
            </summary>
    </member>
    <member name="P:Celeste.TextMenuExt.EaseInSubHeaderExt.FadeVisible">
      <summary>
            Toggling this will make the header ease in/out.
            </summary>
    </member>
    <member name="M:Celeste.TextMenuExt.EaseInSubHeaderExt.#ctor(System.String,System.Boolean,Celeste.TextMenu,System.String)">
      <summary>
            Creates a EaseInSubHeaderExt.
            </summary>
      <param name="title">The sub-header title</param>
      <param name="initiallyVisible">The initial value for FadeVisible</param>
      <param name="containingMenu">The menu containing this SubHeader</param>
      <param name="icon">An icon for the sub-header</param>
    </member>
    <member name="T:Celeste.TextMenuExt.EnumSlider`1">
      <summary>
            Convenience class for creating a <see cref="T:Celeste.TextMenu.Option`1" /> from an <see cref="T:System.Enum" />.<br />
            Not to be confused with <see cref="T:Celeste.TextMenuExt.EnumerableSlider`1" /></summary>
      <typeparam name="T">Enum Type</typeparam>
    </member>
    <member name="M:Celeste.TextMenuExt.EnumSlider`1.#ctor(System.String,`0)">
      <summary>
            Creates a new <see cref="T:Celeste.TextMenuExt.EnumSlider`1" /></summary>
      <param name="label">Slider label (defaults to enum name)</param>
      <param name="startValue">Initial value</param>
    </member>
    <member name="T:Celeste.TextMenuExt.EnumerableSlider`1">
      <summary>
            Convenience class for creating a <see cref="T:Celeste.TextMenu.Option`1" /> from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.<br />
            Not to be confused with <see cref="T:Celeste.TextMenuExt.EnumSlider`1" /></summary>
      <typeparam name="T">Value Type</typeparam>
    </member>
    <member name="M:Celeste.TextMenuExt.EnumerableSlider`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},`0)">
      <summary>
            Creates a new <see cref="T:Celeste.TextMenuExt.EnumerableSlider`1" /></summary>
      <param name="label">Slider label</param>
      <param name="options" />
      <param name="startValue">Initial value</param>
    </member>
    <member name="M:Celeste.TextMenuExt.EnumerableSlider`1.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.String}},`0)">
      <summary>
            Creates a new <see cref="T:Celeste.TextMenuExt.EnumerableSlider`1" /></summary>
      <param name="label">Slider label</param>
      <param name="options">IEnumerable containing <typeparamref name="T" />, <see cref="T:System.String" /> pairs.</param>
      <param name="startValue">Initial value</param>
    </member>
    <member name="T:Celeste.TextMenuExt.IntSlider">
      <summary>
            A Slider optimized for large integer ranges.<br />
            Inherits directly from <see cref="T:Celeste.TextMenu.Item" /></summary>
    </member>
    <member name="M:Celeste.TextMenuExt.IntSlider.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:Celeste.TextMenuExt.IntSlider" /></summary>
      <param name="label">Slider label</param>
      <param name="min">Minimum possible value</param>
      <param name="max">Maximum possible value</param>
      <param name="value">Initial value<br />Restricted between min and max</param>
    </member>
    <member name="M:Celeste.TextMenuExt.IntSlider.Change(System.Action{System.Int32})">
      <inheritdoc cref="M:Celeste.TextMenu.Option`1.Change(System.Action{`0})" />
    </member>
    <member name="T:Celeste.TextMenuExt.SubMenu">
      <summary>
        <see cref="T:Celeste.TextMenu.Item" /> that acts as a Submenu for other Items.
            <br /><br />
            Currently does not support recursive submenus
            </summary>
    </member>
    <member name="P:Celeste.TextMenuExt.SubMenu.Items">
      <inheritdoc cref="P:Celeste.TextMenu.Items" />
    </member>
    <member name="F:Celeste.TextMenuExt.SubMenu.Selection">
      <inheritdoc cref="F:Celeste.TextMenu.Selection" />
    </member>
    <member name="P:Celeste.TextMenuExt.SubMenu.Current">
      <inheritdoc cref="P:Celeste.TextMenu.Current" />
    </member>
    <member name="P:Celeste.TextMenuExt.SubMenu.FirstPossibleSelection">
      <inheritdoc cref="P:Celeste.TextMenu.FirstPossibleSelection" />
    </member>
    <member name="P:Celeste.TextMenuExt.SubMenu.LastPossibleSelection">
      <inheritdoc cref="P:Celeste.TextMenu.LastPossibleSelection" />
    </member>
    <member name="P:Celeste.TextMenuExt.SubMenu.ScrollTargetY">
      <inheritdoc cref="P:Celeste.TextMenu.ScrollTargetY" />
    </member>
    <member name="F:Celeste.TextMenuExt.SubMenu.ItemSpacing">
      <inheritdoc cref="F:Celeste.TextMenu.ItemSpacing" />
    </member>
    <member name="F:Celeste.TextMenuExt.SubMenu.HighlightColor">
      <inheritdoc cref="F:Celeste.TextMenu.HighlightColor" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.#ctor(System.String,System.Boolean)">
      <summary>
            Create a new SubMenu.
            </summary>
      <param name="label" />
      <param name="enterOnSelect">Expand submenu when selected</param>
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.Add(Celeste.TextMenu.Item)">
      <summary>
            Add any non-submenu <see cref="T:Celeste.TextMenu.Item" /> to the Submenu
            </summary>
      <param name="item">Item to be added</param>
      <returns />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.Insert(System.Int32,Celeste.TextMenu.Item)">
      <summary>
            Insert any non-submenu <see cref="T:Celeste.TextMenu.Item" /> into the Submenu at <paramref name="index" /></summary>
      <param name="index" />
      <param name="item">Item to be inserted</param>
      <returns />v
        </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.Remove(Celeste.TextMenu.Item)">
      <summary>
            Remove any non-submenu <see cref="T:Celeste.TextMenu.Item" /> from the Submenu
            </summary>
      <param name="item">Item to be removed</param>
      <returns />v
        </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.Clear">
      <inheritdoc cref="M:Celeste.TextMenu.Clear" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.IndexOf(Celeste.TextMenu.Item)">
      <inheritdoc cref="M:Celeste.TextMenu.IndexOf(Celeste.TextMenu.Item)" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.FirstSelection">
      <inheritdoc cref="M:Celeste.TextMenu.FirstSelection" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.LastSelection">
      <summary>
            Set the selection to the last possible <see cref="T:Celeste.TextMenu.Item" />.
            </summary>
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.MoveSelection(System.Int32,System.Boolean)">
      <inheritdoc cref="M:Celeste.TextMenu.MoveSelection(System.Int32,System.Boolean)" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.RecalculateSize">
      <inheritdoc cref="M:Celeste.TextMenu.RecalculateSize" />
    </member>
    <member name="M:Celeste.TextMenuExt.SubMenu.GetYOffsetOf(Celeste.TextMenu.Item)">
      <inheritdoc cref="M:Celeste.TextMenu.GetYOffsetOf(Celeste.TextMenu.Item)" />
    </member>
    <member name="T:Celeste.TextMenuExt.OptionSubMenu">
      <summary>
        <see cref="T:Celeste.TextMenu.Item" /> that acts as a Slider of Submenus for other Items.
            <br /><br />
            Currently does not support recursive submenus
            </summary>
    </member>
    <member name="F:Celeste.TextMenuExt.OptionSubMenu.Selection">
      <inheritdoc cref="F:Celeste.TextMenu.Selection" />
    </member>
    <member name="F:Celeste.TextMenuExt.OptionSubMenu.OnValueChange">
      <summary>
            Invoked when the selected menu is changed.
            </summary>
    </member>
    <member name="P:Celeste.TextMenuExt.OptionSubMenu.CurrentMenu">
      <summary>
            The selected set of <see cref="T:Celeste.TextMenu.Item" />s.
            </summary>
    </member>
    <member name="P:Celeste.TextMenuExt.OptionSubMenu.Current">
      <inheritdoc cref="P:Celeste.TextMenu.Current" />
    </member>
    <member name="P:Celeste.TextMenuExt.OptionSubMenu.FirstPossibleSelection">
      <inheritdoc cref="P:Celeste.TextMenu.FirstPossibleSelection" />
    </member>
    <member name="P:Celeste.TextMenuExt.OptionSubMenu.LastPossibleSelection">
      <inheritdoc cref="P:Celeste.TextMenu.LastPossibleSelection" />
    </member>
    <member name="P:Celeste.TextMenuExt.OptionSubMenu.ScrollTargetY">
      <inheritdoc cref="P:Celeste.TextMenu.ScrollTargetY" />
    </member>
    <member name="F:Celeste.TextMenuExt.OptionSubMenu.ItemSpacing">
      <inheritdoc cref="F:Celeste.TextMenu.ItemSpacing" />
    </member>
    <member name="M:Celeste.TextMenuExt.OptionSubMenu.Add(System.String,System.Collections.Generic.List{Celeste.TextMenu.Item})">
      <summary>
            Add a list of non-submenu <see cref="T:Celeste.TextMenu.Item" />s to the Submenu
            </summary>
      <param name="label">Displayed submenu label</param>
      <param name="items">Items to be added to the submenu</param>
      <returns />
    </member>
    <member name="M:Celeste.TextMenuExt.OptionSubMenu.FirstSelection">
      <inheritdoc cref="M:Celeste.TextMenu.FirstSelection" />
    </member>
    <member name="M:Celeste.TextMenuExt.OptionSubMenu.MoveSelection(System.Int32,System.Boolean)">
      <inheritdoc cref="M:Celeste.TextMenu.MoveSelection(System.Int32,System.Boolean)" />
    </member>
    <member name="M:Celeste.TextMenuExt.OptionSubMenu.Change(System.Action{System.Int32})">
      <summary>
            Set the action to be invoked when the selected menu is changed.
            </summary>
    </member>
    <member name="M:Celeste.TextMenuExt.GetItems(Celeste.TextMenu)">
      <summary>
            Get a list of all items which have been added to the menu.
            </summary>
    </member>
    <member name="M:Celeste.TextMenuExt.Insert(Celeste.TextMenu,System.Int32,Celeste.TextMenu.Item)">
      <inheritdoc cref="M:Celeste.TextMenu.Insert(System.Int32,Celeste.TextMenu.Item)" />
    </member>
    <member name="M:Celeste.TextMenuExt.Remove(Celeste.TextMenu,Celeste.TextMenu.Item)">
      <inheritdoc cref="M:Celeste.TextMenu.Remove(Celeste.TextMenu.Item)" />
    </member>
    <member name="F:Celeste.AreaData.SID">
      <summary>
            The SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.IsInterludeUnsafe(Celeste.AreaData)">
      <summary>
            Check if the AreaData is an interlude (like Prologue and Epilogue).
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.ToKey(Celeste.AreaData,Celeste.AreaMode)">
      <summary>
            Get an AreaKey for this area.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.GetLevelSet(Celeste.AreaData)">
      <summary>
            Get the name of the level set this area belongs to.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.IsOfficialLevelSet(Celeste.AreaData)">
      <summary>
            Check if the area is official.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.GetSID(Celeste.AreaData)">
      <summary>
            Get the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.SetSID(Celeste.AreaData,System.String)">
      <summary>
            Set the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.GetMeta(Celeste.AreaData)">
      <summary>
            Get the custom metadata if it has been loaded from the .meta or set otherwise.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.SetMeta(Celeste.AreaData,Celeste.Mod.Meta.MapMeta)">
      <summary>
            Set the custom metadata.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.GetASideAreaDataBackup(Celeste.AreaData)">
      <summary>
            Get the A-Side's area data backup.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.SetASideAreaDataBackup(Celeste.AreaData,Celeste.AreaData)">
      <summary>
            Set the A-Side's area data backup.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.RestoreASideAreaData(Celeste.AreaData)">
      <summary>
            Restore A-Side's area data from backup.
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.GetModeMeta(Celeste.AreaData,Celeste.AreaMode)">
      <summary>
            Get the custom metadata of the mode if OverrideASideMeta is enabled. 
            </summary>
    </member>
    <member name="M:Celeste.AreaDataExt.OverrideASideMeta(Celeste.AreaData,Celeste.AreaMode)">
      <summary>
            Apply the metadata of the mode to the area if OverrideASideMeta is enabled.
            </summary>
    </member>
    <member name="P:Celeste.AreaKey.SID">
      <summary>
            The SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaKeyExt.GetLevelSet(Celeste.AreaKey)">
      <summary>
            Get the name of the level set this area belongs to.
            </summary>
    </member>
    <member name="M:Celeste.AreaKeyExt.GetSID(Celeste.AreaKey)">
      <summary>
            Get the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaKeyExt.SetSID(Celeste.AreaKey,System.String)">
      <summary>
            Set the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaKeyExt.GetRelativeIndex(Celeste.AreaKey)">
      <summary>
            Get the index of the area relative to the first area in the level set.
            Depends on the currently loaded area list.
            </summary>
    </member>
    <member name="F:Celeste.AreaStats.SID">
      <summary>
            The SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaStatsExt.ToKey(Celeste.AreaStats,Celeste.AreaMode)">
      <summary>
            Get an AreaKey for this area.
            </summary>
    </member>
    <member name="M:Celeste.AreaStatsExt.GetLevelSet(Celeste.AreaStats)">
      <summary>
            Get the name of the level set this area belongs to.
            </summary>
    </member>
    <member name="M:Celeste.AreaStatsExt.GetSID(Celeste.AreaStats)">
      <summary>
            Get the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.AreaStatsExt.SetSID(Celeste.AreaStats,System.String)">
      <summary>
            Set the SID (string ID) of the area.
            </summary>
    </member>
    <member name="M:Celeste.Audio.IngestBank(Celeste.Mod.ModAsset)">
      <summary>
            Loads an FMOD Bank from the given asset.
            </summary>
    </member>
    <member name="M:Celeste.Audio.IngestGUIDs(Celeste.Mod.ModAsset)">
      <summary>
            Loads an FMOD GUID table from the given asset.
            </summary>
    </member>
    <member name="M:Celeste.AudioExt.CheckFMOD(FMOD.RESULT)">
      <summary>
            Checks if the given FMOD result is RESULT.OK. Throws otherwise.
            </summary>
    </member>
    <member name="M:Celeste.AudioExt.IngestBank(Celeste.Mod.ModAsset)">
      <inheritdoc cref="M:Celeste.Audio.IngestBank(Celeste.Mod.ModAsset)" />
    </member>
    <member name="M:Celeste.AudioExt.IngestGUIDs(Celeste.Mod.ModAsset)">
      <inheritdoc cref="M:Celeste.Audio.IngestGUIDs(Celeste.Mod.ModAsset)" />
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.ForceRemapAll">
      <summary>
            ForceRemap all important mappings which are fully unassigned and require mappings when leaving the menu.
            </summary>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.GetLabel(System.Int32)">
      <summary>
            Gets the label to display on-screen for a mapping.
            </summary>
      <param name="mapping">The mapping index</param>
      <returns>The button name to display</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.AddButtonConfigLine(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Adds a button mapping to the button config screen.
            </summary>
      <param name="btn">The mapping index</param>
      <param name="list">The list of buttons currently mapped to it</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.AddButtonConfigLine``1(``0,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Adds a button mapping to the button config screen.
            </summary>
      <param name="btn">The mapping (should be an enum value)</param>
      <param name="list">The list of buttons currently mapped to it</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.ForceDefaultButton(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Forces a button to be bound to an action, in addition to the already bound buttons.
            </summary>
      <param name="defaultBtn">The button to force bind</param>
      <param name="boundBtn">The button already bound</param>
      <returns>A list containing both button and defaultBtn</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.ForceDefaultButton(Microsoft.Xna.Framework.Input.Buttons,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Forces a button to be bound to an action, in addition to already bound buttons.
            </summary>
      <param name="defaultBtn">The button to force bind</param>
      <param name="boundBtns">The list of buttons already bound</param>
      <returns>A list containing both buttons in list and defaultBtn</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.Reload(System.Int32)">
      <summary>
            Rebuilds the button mapping menu. Should clear the menu and add back all options.
            </summary>
      <param name="index">The index to focus on in the menu</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.RemoveDuplicates(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Removes the button from all lists other than the current remapping list if needed.
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="list">The list that newBtn has been added to</param>
      <param name="btn">The new button that the user is attempting to set.</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.ForceRemap(System.Int32)">
      <summary>
            Forcibly gives all important mappings some default button values.
            </summary>
      <param name="mapping">The int value of the mapping being remapped</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV1.GetRemapList(System.Int32,Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Returns the list used to remap buttons during a remap operation.
            This should be the a List&lt;Buttons&gt; field in your settings class
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="newBtn">The new button that the user is attempting to set.</param>
      <returns>the field to set buttons with, otherwise return null to cancel the operation</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.ForceRemapAll">
      <summary>
            ForceRemap all important mappings which are fully unassigned and require mappings when leaving the menu.
            </summary>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.GetLabel(System.Int32)">
      <summary>
            Gets the label to display on-screen for a mapping.
            </summary>
      <param name="mapping">The mapping index</param>
      <returns>The button name to display</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.AddButtonConfigLine(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Adds a button mapping to the button config screen.
            </summary>
      <param name="btn">The mapping index</param>
      <param name="list">The list of buttons currently mapped to it</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.AddButtonConfigLine``1(``0,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Adds a button mapping to the button config screen.
            </summary>
      <param name="btn">The mapping (should be an enum value)</param>
      <param name="list">The list of buttons currently mapped to it</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.ForceDefaultButton(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Forces a button to be bound to an action, in addition to the already bound buttons.
            </summary>
      <param name="defaultBtn">The button to force bind</param>
      <param name="boundBtn">The button already bound</param>
      <returns>A list containing both button and defaultBtn</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.ForceDefaultButton(Microsoft.Xna.Framework.Input.Buttons,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons})">
      <summary>
            Forces a button to be bound to an action, in addition to already bound buttons.
            </summary>
      <param name="defaultBtn">The button to force bind</param>
      <param name="boundBtns">The list of buttons already bound</param>
      <returns>A list containing both buttons in list and defaultBtn</returns>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.Reload(System.Int32)">
      <summary>
            Rebuilds the button mapping menu. Should clear the menu and add back all options.
            </summary>
      <param name="index">The index to focus on in the menu</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.RemoveDuplicates(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Removes the button from all lists other than the current remapping list if needed.
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="list">The list that newBtn has been added to</param>
      <param name="btn">The new button that the user is attempting to set.</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.ForceRemap(System.Int32)">
      <summary>
            Forcibly gives all important mappings some default button values.
            </summary>
      <param name="mapping">The int value of the mapping being remapped</param>
    </member>
    <member name="M:Celeste.ButtonConfigUI_InputV2.GetRemapList(System.Int32,Microsoft.Xna.Framework.Input.Buttons)">
      <summary>
            Returns the list used to remap buttons during a remap operation.
            This should be the a List&lt;Buttons&gt; field in your settings class
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="newBtn">The new button that the user is attempting to set.</param>
      <returns>the field to set buttons with, otherwise return null to cancel the operation</returns>
    </member>
    <member name="M:Celeste.DashListener.#ctor(System.Action{Microsoft.Xna.Framework.Vector2})">
      <summary>
        <inheritdoc cref="M:Celeste.DashListener.#ctor" />
      </summary>
      <param name="onDash">Invoked when the <see cref="T:Celeste.Player" /> dashes.</param>
    </member>
    <member name="M:Celeste.Dialog.CleanLevelSet(System.String)">
      <summary>
            Same as Dialog.Clean, but for level set names.
            Tries to find a value under both "LEVELSET_NAME" and "NAME", otherwise returns name.SpacedPascalCase()
            </summary>
    </member>
    <member name="M:Celeste.DialogExt.CleanLevelSet(System.String)">
      <inheritdoc cref="M:Celeste.Dialog.CleanLevelSet(System.String)" />
    </member>
    <member name="M:Celeste.EntityData.orig_Has(System.String)">
      <summary>Vanilla Method. Use <see cref="M:Celeste.EntityData.Has(System.String)" /> instead.</summary>
    </member>
    <member name="M:Celeste.GameLoader.checkModSaveDataBackups">
      <summary>
            Initializes mod save data backups if required (if Everest was just updated past 2104).
            </summary>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.GetLabel(System.Int32)">
      <summary>
            Gets the label to display on-screen for a mapping.
            </summary>
      <param name="mapping">The mapping index</param>
      <returns>The key name to display</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.AddKeyConfigLine(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Adds a key mapping to the keyboard config screen.
            </summary>
      <param name="key">The mapping index</param>
      <param name="list">The list of keys currently mapped to it</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.AddKeyConfigLine``1(``0,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Adds a key mapping to the keyboard config screen.
            </summary>
      <param name="key">The mapping (should be an enum value)</param>
      <param name="list">The list of keys currently mapped to it</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.ForceDefaultKey(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
      <summary>
            Forces a key to be bound to an action, in addition to the already bound key.
            </summary>
      <param name="defaultKey">The key to force bind</param>
      <param name="boundKey">The key already bound</param>
      <returns>A list containing both key and defaultKey</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.ForceDefaultKey(Microsoft.Xna.Framework.Input.Keys,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Forces a key to be bound to an action, in addition to already bound keys.
            </summary>
      <param name="defaultKey">The key to force bind</param>
      <param name="boundKeys">The list of keys already bound</param>
      <returns>A list containing both keys in list and defaultKey</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.Reload(System.Int32)">
      <summary>
            Rebuilds the key mapping menu. Should clear the menu and add back all options.
            </summary>
      <param name="index">The index to focus on in the menu</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.SupportsMultipleBindings(System.Int32)">
      <summary>
            Determines if the key being set supports multiple bindings.
            If this is the case, Shift+Confirm will allow to add a binding and Confirm will replace existing bindings.
            </summary>
      <param name="mapping">The mapping</param>
      <returns>true if the key supports multiple bindings, false otherwise</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV1.GetRemapList(System.Int32,Microsoft.Xna.Framework.Input.Keys)">
      <summary>
            Returns the list used to remap keys during a remap operation.
            This should be a List&lt;Keys&gt; field in your settings class
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="newKey">The new key that the user is attempting to set.</param>
      <returns>the field to set keys with, otherwise return null to cancel the operation</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.GetLabel(System.Int32)">
      <summary>
            Gets the label to display on-screen for a mapping.
            </summary>
      <param name="mapping">The mapping index</param>
      <returns>The key name to display</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.AddKeyConfigLine(System.Int32,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Adds a key mapping to the keyboard config screen.
            </summary>
      <param name="key">The mapping index</param>
      <param name="list">The list of keys currently mapped to it</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.AddKeyConfigLine``1(``0,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Adds a key mapping to the keyboard config screen.
            </summary>
      <param name="key">The mapping (should be an enum value)</param>
      <param name="list">The list of keys currently mapped to it</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.ForceDefaultKey(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
      <summary>
            Forces a key to be bound to an action, in addition to the already bound key.
            </summary>
      <param name="defaultKey">The key to force bind</param>
      <param name="boundKey">The key already bound</param>
      <returns>A list containing both key and defaultKey</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.ForceDefaultKey(Microsoft.Xna.Framework.Input.Keys,System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
      <summary>
            Forces a key to be bound to an action, in addition to already bound keys.
            </summary>
      <param name="defaultKey">The key to force bind</param>
      <param name="boundKeys">The list of keys already bound</param>
      <returns>A list containing both keys in list and defaultKey</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.Reload(System.Int32)">
      <summary>
            Rebuilds the key mapping menu. Should clear the menu and add back all options.
            </summary>
      <param name="index">The index to focus on in the menu</param>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.SupportsMultipleBindings(System.Int32)">
      <summary>
            Determines if the key being set supports multiple bindings.
            If this is the case, Shift+Confirm will allow to add a binding and Confirm will replace existing bindings.
            </summary>
      <param name="mapping">The mapping</param>
      <returns>true if the key supports multiple bindings, false otherwise</returns>
    </member>
    <member name="M:Celeste.KeyboardConfigUI_InputV2.GetRemapList(System.Int32,Microsoft.Xna.Framework.Input.Keys)">
      <summary>
            Returns the list used to remap keys during a remap operation.
            This should be a List&lt;Keys&gt; field in your settings class
            </summary>
      <param name="remapping">The int value of the mapping being remapped</param>
      <param name="newKey">The new key that the user is attempting to set.</param>
      <returns>the field to set keys with, otherwise return null to cancel the operation</returns>
    </member>
    <member name="P:Celeste.Level.DefaultSpawnPoint">
      <summary>
            If in vanilla levels, gets the spawnpoint closest to the bottom left of the level.<br />
            Otherwise, get the first spawnpoint defined in the level data.
            </summary>
    </member>
    <member name="M:Celeste.Level.orig_DoScreenWipe(System.Boolean,System.Action,System.Boolean)">
      <summary>Vanilla Method. Use <see cref="M:Celeste.Level.DoScreenWipe(System.Boolean,System.Action,System.Boolean)" /> instead.</summary>
    </member>
    <member name="M:Celeste.Level.DoScreenWipe(System.Boolean,System.Action,System.Boolean)">
      <summary>
            Activate the area-specific <see cref="T:Celeste.ScreenWipe" />.<br /><seealso cref="F:Celeste.AreaData.Wipe">See Also.</seealso><br />
            If <see cref="F:Celeste.Level.SkipScreenWipes" /> is greater than zero, do nothing.
            </summary>
      <param name="wipeIn">Wipe direction.</param>
      <param name="onComplete" />
      <param name="hiresSnow" />
    </member>
    <member name="M:Celeste.Level.NextColorGrade(System.String)">
      <inheritdoc cref="M:Celeste.Level.NextColorGrade(System.String,System.Single)" />
    </member>
    <member name="M:Celeste.Level.CompleteArea(System.Boolean,System.Boolean)">
      <inheritdoc cref="M:Celeste.Level.CompleteArea(System.Boolean,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:Celeste.Level.LoadCustomEntity(Celeste.EntityData,Celeste.Level)">
      <summary>
            Search for a custom entity that matches the <see cref="F:Celeste.EntityData.Name" />.<br />
            To register a custom entity, use <see cref="T:Celeste.Mod.Entities.CustomEntityAttribute" /> or <see cref="E:Celeste.Mod.Everest.Events.Level.OnLoadEntity" />.<br /><seealso href="https://github.com/EverestAPI/Resources/wiki/Custom-Entities-and-Triggers">Read More</seealso>.
            </summary>
      <param name="entityData" />
      <param name="level">The level to add the entity to.</param>
      <returns />
    </member>
    <member name="F:Celeste.LevelEnter.ErrorMessage">
      <summary>
            The error message to display when entering a level. Null if no error message should be presented.
            </summary>
    </member>
    <member name="P:Celeste.LevelEnterExt.ErrorMessage">
      <inheritdoc cref="F:Celeste.LevelEnter.ErrorMessage" />
    </member>
    <member name="F:Celeste.MainMenuSmallButton.LabelName">
      <summary>
            The original label name dialog key.<br />
            Useful when inserting your own button between others.
            </summary>
    </member>
    <member name="F:Celeste.MainMenuSmallButton.IconName">
      <summary>
            The original GUI atlas icon path.<br />
            Useful when inserting your own button between others.
            </summary>
    </member>
    <member name="M:Celeste.MainMenuSmallButtonExt.GetLabelName(Celeste.MainMenuSmallButton)">
      <summary>
            Get the original label name dialog key. Useful when inserting your own button between others.
            </summary>
    </member>
    <member name="M:Celeste.MainMenuSmallButtonExt.GetIconName(Celeste.MainMenuSmallButton)">
      <summary>
            Get the original GUI atlas icon path. Useful when inserting your own button between others.
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.GetMeta(Celeste.MapData)">
      <summary>
            Get the mod mode metadata of the map.
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.GetDetectedCassette(Celeste.MapData)">
      <summary>
            Returns whether the map contains a cassette or not.
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.SetDetectedCassette(Celeste.MapData)">
      <summary>
            To be called by the CoreMapDataProcessor when a cassette is detected in a map.
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.GetDetectedStrawberriesIncludingUntracked(Celeste.MapData)">
      <summary>
            Returns the number of strawberries in the map, including untracked ones (goldens, moons).
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.SetDetectedStrawberriesIncludingUntracked(Celeste.MapData,System.Int32)">
      <summary>
            To be called by the CoreMapDataProcessor when processing a map is over, to register the detected berry count.
            </summary>
    </member>
    <member name="M:Celeste.MapDataExt.GetDashlessGoldenberries(Celeste.MapData)">
      <summary>
            Returns the list of dashless goldens in the map.
            </summary>
    </member>
    <member name="M:Celeste.MenuButtonExt.SetSelected(Celeste.MenuButton,System.Boolean)">
      <summary>
            Set the button's inner selected value.
            </summary>
    </member>
    <member name="F:Celeste.MTNExt.MountainMappings">
      <summary>
            Maps the key to the ModAsset of the map in Everest.Content to the MountainResources for it
            </summary>
    </member>
    <member name="F:Celeste.MTNExt.ObjModelCache">
      <summary>
            Stores .obj model files when they are loaded, so that they only get loaded once.
            </summary>
    </member>
    <member name="M:Celeste.MTNExt.LoadModData">
      <summary>
            Load the custom mountain models for mods.
            </summary>
    </member>
    <member name="M:Celeste.MTNExt.LoadMod">
      <summary>
            Load the custom mountain textures for mods.
            </summary>
    </member>
    <member name="M:Celeste.ObjModel.CreateFromStream(System.IO.Stream,System.String)">
      <summary>
            Create a new ObjModel from a stream
            The filename is mainly just to check if it's a .export
            </summary>
    </member>
    <member name="M:Celeste.ObjModelExt.CreateFromStream(System.IO.Stream,System.String)">
      <inheritdoc cref="M:Celeste.ObjModel.CreateFromStream(System.IO.Stream,System.String)" />
    </member>
    <member name="T:Celeste.OuiFileSelectSlot.ISubmenu">
      <summary>
            Interface used to tag OuiFileSelectSlot submenus.
            </summary>
    </member>
    <member name="M:Celeste.Player.GetCurrentTrailColor">
      <summary>
            Get the current player dash trail color.
            </summary>
    </member>
    <member name="M:Celeste.PlayerExt.GetCurrentTrailColor(Celeste.Player)">
      <inheritdoc cref="M:Celeste.Player.GetCurrentTrailColor" />
    </member>
    <member name="M:Celeste.PlayerExt.IsIntroState(Celeste.Player)">
      <summary>
            Get whether the player is in an intro state or not.
            </summary>
    </member>
    <member name="M:Celeste.PlayerHair.GetHairTexture(System.Int32)">
      <summary>
            Get the current player hair texture for the given hair segment.
            </summary>
    </member>
    <member name="M:Celeste.PlayerHair.GetHairScale(System.Int32)">
      <summary>
            Get the current player hair scale for the given hair segment.
            </summary>
    </member>
    <member name="M:Celeste.PlayerHair.GetHairColor(System.Int32)">
      <summary>
            Get the current player hair color for the given hair segment.
            </summary>
    </member>
    <member name="M:Celeste.PlayerHairExt.GetHairTexture(Celeste.PlayerHair,System.Int32)">
      <inheritdoc cref="M:Celeste.PlayerHair.GetHairTexture(System.Int32)" />
    </member>
    <member name="M:Celeste.PlayerHairExt.GetHairScale(Celeste.PlayerHair,System.Int32)">
      <inheritdoc cref="M:Celeste.PlayerHair.GetHairScale(System.Int32)" />
    </member>
    <member name="M:Celeste.PlayerHairExt.GetHairColor(Celeste.PlayerHair,System.Int32)">
      <inheritdoc cref="M:Celeste.PlayerHair.GetHairColor(System.Int32)" />
    </member>
    <member name="M:Celeste.PlayerHairExt.GetSprite(Celeste.PlayerHair)">
      <summary>
            Get the PlayerSprite which the PlayerHair belongs to.
            </summary>
    </member>
    <member name="M:Celeste.PlayerHairExt.GetWave(Celeste.PlayerHair)">
      <summary>
            Get the current wave, updated by Engine.DeltaTime * 4f each Update.
            </summary>
    </member>
    <member name="M:Celeste.SaveData.LoadModSaveData(System.Int32)">
      <summary>
            Load mod saves only when the given slot is not the currently loaded slot.
            </summary>
      <param name="slot">The slot to load</param>
    </member>
    <member name="M:Celeste.SaveData.GetLevelSetStatsFor(System.String)">
      <summary>
            Get the statistics for a given level set.
            </summary>
    </member>
    <member name="M:Celeste.SaveDataExt.GetLevelSets(Celeste.SaveData)">
      <summary>
            Get the statistics for all level sets.
            </summary>
    </member>
    <member name="M:Celeste.SaveDataExt.SetLevelSets(Celeste.SaveData,System.Collections.Generic.List{Celeste.LevelSetStats})">
      <summary>
            Set the statistics for all level sets.
            </summary>
    </member>
    <member name="M:Celeste.SaveDataExt.GetLevelSet(Celeste.SaveData)">
      <summary>
            Get the last played level set.
            </summary>
    </member>
    <member name="M:Celeste.SaveDataExt.GetLevelSetStats(Celeste.SaveData)">
      <summary>
            Get the statistics for the last played level set.
            </summary>
    </member>
    <member name="M:Celeste.SaveDataExt.GetLevelSetStatsFor(Celeste.SaveData,System.String)">
      <inheritdoc cref="M:Celeste.SaveData.GetLevelSetStatsFor(System.String)" />
    </member>
    <member name="F:Celeste.TagsExt.SubHUD">
      <summary>
            Tag to be used for entities rendering like a HUD, but below the actual game HUD.
            </summary>
    </member>
    <member name="P:Celeste.TextMenu.Items">
      <summary>
            The items contained in this menu.
            </summary>
    </member>
    <member name="M:Celeste.TextMenu.Insert(System.Int32,Celeste.TextMenu.Item)">
      <summary>
            Insert a <see cref="T:Celeste.TextMenu.Item" /> at position <paramref name="index" /> in the menu.
            </summary>
      <param name="index" />
      <param name="item" />
      <returns />
    </member>
    <member name="M:Celeste.TextMenu.Remove(Celeste.TextMenu.Item)">
      <summary>
            Remove a <see cref="T:Celeste.TextMenu.Item" /> from the menu.
            </summary>
      <param name="item">A <see cref="T:Celeste.TextMenu.Item" /> contained in this menu.</param>
      <returns />
    </member>
    <member name="F:Celeste.TextMenu.Option`1.UnselectedColor">
      <summary>
            The color the text takes when the option is active, but unselected (defaults to white).
            </summary>
    </member>
    <member name="P:Celeste.TextMenu.Item.AlwaysRender">
      <summary>
            Set this property to true to force the Item to render even when off-screen.
            </summary>
    </member>
    <member name="F:Celeste.TextMenu.Item.AboveAll">
      <summary>
            Items that have AboveAll set to true will render above those that have it set to false.
            </summary>
    </member>
    <member name="P:Celeste.WaterInteraction.Bounds">
      <summary>
            The water collision used for this component's Entity.
            </summary>
    </member>
    <member name="M:Celeste.WaterInteraction.#ctor(Microsoft.Xna.Framework.Rectangle,System.Func{System.Boolean})">
      <summary>
            Create a new <see cref="T:Celeste.WaterInteraction" />.
            </summary>
      <param name="bounds">The collision size.</param>
      <param name="isDashing">Used to determine the force of impact against the <see cref="T:Celeste.Water" />.</param>
    </member>
    <member name="T:YYProject.XXHash.XXHash32">
      <summary>
            Represents the class which provides a implementation of the xxHash32 algorithm.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:YYProject.XXHash.XXHash32.Create">
      <summary>
            Creates an instance of <see cref="T:YYProject.XXHash.XXHash32" /> class by default seed(0).
            </summary>
      <returns />
    </member>
    <member name="M:YYProject.XXHash.XXHash32.Create(System.String)">
      <summary>
            Creates an instance of the specified implementation of XXHash32 algorithm.
            <para>This method always throws <see cref="T:System.NotSupportedException" />. </para></summary>
      <param name="algName">The hash algorithm implementation to use.</param>
      <returns>This method always throws <see cref="T:System.NotSupportedException" />. </returns>
      <exception cref="T:System.NotSupportedException">This method is not be supported.</exception>
    </member>
    <member name="M:YYProject.XXHash.XXHash32.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash32" /> class by default seed(0).
            </summary>
    </member>
    <member name="M:YYProject.XXHash.XXHash32.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash32" /> class, and sets the <see cref="P:YYProject.XXHash.XXHash32.Seed" /> to the specified value.
            </summary>
      <param name="seed">Represent the seed to be used for xxHash32 computing.</param>
    </member>
    <member name="P:YYProject.XXHash.XXHash32.HashUInt32">
      <summary>
            Gets the <see cref="T:System.UInt32" /> value of the computed hash code.
            </summary>
      <exception cref="T:System.InvalidOperationException">Hash computation has not yet completed.</exception>
    </member>
    <member name="P:YYProject.XXHash.XXHash32.Seed">
      <summary>
            Gets or sets the value of seed used by xxHash32 algorithm.
            </summary>
      <exception cref="T:System.InvalidOperationException">Hash computation has not yet completed.</exception>
    </member>
    <member name="M:YYProject.XXHash.XXHash32.Initialize">
      <summary>
            Initializes this instance for new hash computing.
            </summary>
    </member>
    <member name="M:YYProject.XXHash.XXHash32.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
      <param name="array">The input to compute the hash code for.</param>
      <param name="ibStart">The offset into the byte array from which to begin using data.</param>
      <param name="cbSize">The number of bytes in the byte array to use as data.</param>
    </member>
    <member name="M:YYProject.XXHash.XXHash32.HashFinal">
      <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:YYProject.XXHash.XXHash64">
      <summary>
            Represents the class which provides a implementation of the xxHash64 algorithm.
            </summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="M:YYProject.XXHash.XXHash64.Create">
      <summary>
            Creates an instance of <see cref="T:YYProject.XXHash.XXHash64" /> class by default seed(0).
            </summary>
      <returns />
    </member>
    <member name="M:YYProject.XXHash.XXHash64.Create(System.String)">
      <summary>
            Creates an instance of the specified implementation of XXHash64 algorithm.
            <para>This method always throws <see cref="T:System.NotSupportedException" />. </para></summary>
      <param name="algName">The hash algorithm implementation to use.</param>
      <returns>This method always throws <see cref="T:System.NotSupportedException" />. </returns>
      <exception cref="T:System.NotSupportedException">This method is not be supported.</exception>
    </member>
    <member name="M:YYProject.XXHash.XXHash64.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash64" /> class by default seed(0).
            </summary>
    </member>
    <member name="M:YYProject.XXHash.XXHash64.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash64" /> class, and sets the <see cref="P:YYProject.XXHash.XXHash64.Seed" /> to the specified value.
            </summary>
      <param name="seed">Represent the seed to be used for xxHash64 computing.</param>
    </member>
    <member name="P:YYProject.XXHash.XXHash64.HashUInt64">
      <summary>
            Gets the <see cref="T:System.UInt64" /> value of the computed hash code.
            </summary>
      <exception cref="T:System.InvalidOperationException">Computation has not yet completed.</exception>
    </member>
    <member name="P:YYProject.XXHash.XXHash64.Seed">
      <summary>
             Gets or sets the value of seed used by xxHash64 algorithm.
            </summary>
      <exception cref="T:System.InvalidOperationException">Computation has not yet completed.</exception>
    </member>
    <member name="M:YYProject.XXHash.XXHash64.Initialize">
      <summary>
            Initializes this instance for new hash computing.
            </summary>
    </member>
    <member name="M:YYProject.XXHash.XXHash64.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
      <param name="array">The input to compute the hash code for.</param>
      <param name="ibStart">The offset into the byte array from which to begin using data.</param>
      <param name="cbSize">The number of bytes in the byte array to use as data.</param>
    </member>
    <member name="M:YYProject.XXHash.XXHash64.HashFinal">
      <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
      <returns>The computed hash code.</returns>
    </member>
    <member name="T:MonoMod.ProxyFileCallsAttribute">
      <summary>
            Proxy any System.IO.File.* calls inside the method via Celeste.Mod.Helpers.FileProxy.*
            </summary>
    </member>
    <member name="T:MonoMod.PatchMapDataLoaderAttribute">
      <summary>
            Check for ldstr "Corrupted Level Data" and pop the throw after that.
            Also manually execute ProxyFileCalls rule.
            Also includes a patch for the strawberry tracker.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelDataBerryTracker">
      <summary>
            A patch for the strawberry tracker, allowing all registered modded berries to be detected.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelLoaderAttribute">
      <summary>
            Patch the Godzilla-sized level loading method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchStrawberryTrainCollectionOrder">
      <summary>
            A patch for Strawberry that takes into account that some modded strawberries may not allow standard collection rules.
            </summary>
    </member>
    <member name="T:MonoMod.PatchBackdropParserAttribute">
      <summary>
            Patch the Godzilla-sized backdrop parsing method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelUpdateAttribute">
      <summary>
            Patch the Godzilla-sized level updating method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelRenderAttribute">
      <summary>
            Patch the Godzilla-sized level rendering method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelLoaderThreadAttribute">
      <summary>
            Patch the Godzilla-sized level loading thread method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchTransitionRoutineAttribute">
      <summary>
            Patch the Godzilla-sized level transition method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchErrorLogWriteAttribute">
      <summary>
            Find ldfld Engine::Version + ToString. Pop ToString result, call Everest::get_VersionCelesteString
            </summary>
    </member>
    <member name="T:MonoMod.PatchHeartGemCollectRoutineAttribute">
      <summary>
            Patch the heart gem collection routine instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchBadelineChaseRoutineAttribute">
      <summary>
            Patch the Badeline chase routine instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchBadelineBossOnPlayerAttribute">
      <summary>
            Patch the Badeline boss OnPlayer method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchCloudAddedAttribute">
      <summary>
            Patch the Cloud.Added method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchRainFGRenderAttribute">
      <summary>
            Patch the RainFG.Render method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchDialogLoaderAttribute">
      <summary>
            Patch the Dialog.Load method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLoadLanguageAttribute">
      <summary>
            Patch the Language.LoadTxt method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchInitMMSharedDataAttribute">
      <summary>
            Automatically fill InitMMSharedData based on the current patch flags.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLevelExitRoutineAttribute">
      <summary>
            Slap a ldfld completeMeta right before newobj AreaComplete
            </summary>
    </member>
    <member name="T:MonoMod.PatchAreaCompleteCtorAttribute">
      <summary>
            Slap a MapMetaCompleteScreen param at the end of the constructor and ldarg it right before newobj CompleteRenderer
            </summary>
    </member>
    <member name="T:MonoMod.PatchGameLoaderIntroRoutineAttribute">
      <summary>
            Patch the GameLoader.IntroRoutine method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchSaveRoutineAttribute">
      <summary>
            Patch the UserIO.SaveRoutine method instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchPlayerOrigUpdateAttribute">
      <summary>
            Patch the orig_Update method in Player instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchChapterPanelSwapRoutineAttribute">
      <summary>
            Patch the SwapRoutine method in OuiChapterPanel instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.PatchStrawberryInterfaceAttribute">
      <summary>
            Patch the Strawberry class to tack on the IStrawberry interface for the StrawberryRegistry
            </summary>
    </member>
    <member name="T:MonoMod.PatchInterfaceAttribute">
      <summary>
            Helper for patching methods force-implemented by an interface
            </summary>
    </member>
    <member name="T:MonoMod.PatchFileSelectSlotRenderAttribute">
      <summary>
            IL-patch the Render method for file select slots instead of reimplementing it,
            to un-hardcode stamps.
            </summary>
    </member>
    <member name="T:MonoMod.PatchTrackableStrawberryCheckAttribute">
      <summary>
            Take out the "strawberry" equality check and replace it with a call to StrawberryRegistry.TrackableContains
            to include registered mod berries as well.
            </summary>
    </member>
    <member name="T:MonoMod.PatchPathfinderRenderAttribute">
      <summary>
            Patch the pathfinder debug rendering to make it aware of the array size being unhardcoded.
            </summary>
    </member>
    <member name="T:MonoMod.PatchTotalHeartGemChecksAttribute">
      <summary>
            Patch references to TotalHeartGems to refer to TotalHeartGemsInVanilla instead.
            </summary>
    </member>
    <member name="T:MonoMod.PatchTotalHeartGemChecksInRoutineAttribute">
      <summary>
            Same as above, but for references in routines.
            </summary>
    </member>
    <member name="T:MonoMod.PatchOuiJournalStatsHeartGemCheckAttribute">
      <summary>
            Patch a reference to TotalHeartGems in the OuiJournalGlobal constructor to unharcode the check for golden berry unlock.
            </summary>
    </member>
    <member name="T:MonoMod.MakeMethodPublicAttribute">
      <summary>
            Makes the annotated method public.
            </summary>
    </member>
    <member name="T:MonoMod.PatchSpinnerCreateSpritesAttribute">
      <summary>
            Patches the CrystalStaticSpinner.AddSprites method to make it more efficient.
            </summary>
    </member>
    <member name="T:MonoMod.PatchOuiFileSelectSubmenuChecksAttribute">
      <summary>
            Patches the checks for OuiAssistMode to include a check for OuiFileSelectSlot.ISubmenu as well.
            </summary>
    </member>
    <member name="T:MonoMod.PatchFontsPrepareAttribute">
      <summary>
            Patches the Fonts.Prepare method to also include custom fonts.
            </summary>
    </member>
    <member name="T:MonoMod.MakeEntryPointAttribute">
      <summary>
            Make the marked method the new entry point.
            </summary>
    </member>
    <member name="T:MonoMod.PatchCelesteMainAttribute">
      <summary>
            Patch the original Celeste entry point instead of reimplementing it in Everest.
            </summary>
    </member>
    <member name="T:MonoMod.RemoveCommandAttributeFromVanillaLoadMethodAttribute">
      <summary>
            Removes the [Command] attribute from the matching vanilla method in Celeste.Commands.
            </summary>
    </member>
    <member name="T:MonoMod.PatchFakeHeartColorAttribute">
      <summary>
            Patch the fake heart color to make it customizable.
            </summary>
    </member>
    <member name="T:MonoMod.PatchOuiFileNamingRenderingAttribute">
      <summary>
            Patch the file naming rendering to hide the "switch between katakana and hiragana" prompt when the menu is not focused.
            </summary>
    </member>
    <member name="T:MonoMod.PatchRumbleTriggerAwakeAttribute">
      <summary>
            Include the option to use Y range of trigger nodes.
            </summary>
    </member>
    <member name="T:MonoMod.PatchEventTriggerOnEnterAttribute">
      <summary>
            Include check for custom events.
            </summary>
    </member>
    <member name="T:MonoMod.PatchWaterUpdateAttribute">
      <summary>
            Modify collision to make it customizable.
            </summary>
    </member>
    <member name="T:MonoMod.PatchFakeHeartDialogAttribute">
      <summary>
            Add custom dialog to fake hearts.
            </summary>
    </member>
    <member name="T:MonoMod.PatchIntroCrusherSequenceAttribute">
      <summary>
            Include checks for manual triggering.
            </summary>
    </member>
    <member name="T:MonoMod.PatchTextMenuOptionColorAttribute">
      <summary>
            Patches the unselected color in TextMenu.Option to make it customizable.
            </summary>
    </member>
    <member name="T:MonoMod.PatchOuiChapterPanelRenderAttribute">
      <summary>
            Patches chapter panel rendering to allow for custom chapter cards.
            </summary>
    </member>
    <member name="T:MonoMod.PatchGoldenBlockStaticMoversAttribute">
      <summary>
            Patches GoldenBlocks to disable static movers if the block is disabled.
            </summary>
    </member>
    <member name="T:MonoMod.PatchLookoutUpdateAttribute">
      <summary>
            Don't remove TalkComponent even watchtower collide solid, so that watchtower can be hidden behind Solid.
            </summary>
    </member>
    <member name="T:MonoMod.PatchDecalUpdateAttribute">
      <summary>
            Un-hardcode the range of the "Scared" decals.
            </summary>
    </member>
    <member name="T:MonoMod.PatchAreaCompleteMusicAttribute">
      <summary>
            Patches LevelExit.Begin to make the endscreen music customizable.
            </summary>
    </member>
    <member name="T:MonoMod.PatchAreaCompleteVersionNumberAndVariantsAttribute">
      <summary>
            Patches AreaComplete.VersionNumberAndVariants to offset the version number when necessary.
            </summary>
    </member>
    <member name="T:MonoMod.PatchInputConfigResetAttribute">
      <summary>
            Patches {Button,Keyboard}ConfigUI.Update (InputV2) to call a new Reset method instead of the vanilla one.
            </summary>
    </member>
    <member name="T:MonoMod.PatchAscendManagerRoutineAttribute">
      <summary>
            Patches AscendManager.Routine to fix gameplay RNG in custom maps.
            </summary>
    </member>
    <member name="P:Monocle.Atlas.Textures">
      <summary>
            The internal string-MTexture dictionary.
            </summary>
    </member>
    <member name="M:Monocle.Atlas.orig_FromAtlas(System.String,Monocle.Atlas.AtlasDataFormat)">
      <summary>Vanilla Method. Use <see cref="M:Monocle.Atlas.FromAtlas(System.String,Monocle.Atlas.AtlasDataFormat)" /> instead.</summary>
    </member>
    <member name="M:Monocle.Atlas.orig_FromMultiAtlas(System.String,System.String[],Monocle.Atlas.AtlasDataFormat)">
      <summary>Vanilla Method. Use <see cref="M:Monocle.Atlas.FromMultiAtlas(System.String,System.String[],Monocle.Atlas.AtlasDataFormat)" /> instead.</summary>
    </member>
    <member name="M:Monocle.Atlas.orig_FromMultiAtlas(System.String,System.String,Monocle.Atlas.AtlasDataFormat)">
      <summary>Vanilla Method. Use <see cref="M:Monocle.Atlas.FromMultiAtlas(System.String,System.String,Monocle.Atlas.AtlasDataFormat)" /> instead.</summary>
    </member>
    <member name="M:Monocle.Atlas.orig_FromDirectory(System.String)">
      <summary>Vanilla Method. Use <see cref="M:Monocle.Atlas.FromDirectory(System.String)" /> instead.</summary>
    </member>
    <member name="M:Monocle.Atlas.Ingest(Celeste.Mod.ModAsset)">
      <summary>
            Feed the given ModAsset into the atlas.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.GetTextures(Monocle.Atlas)">
      <summary>
            Get the internal string-MTexture dictionary.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.GetDataMethod(Monocle.Atlas)">
      <summary>
            Get the method with which this atlas was loaded.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.GetDataPath(Monocle.Atlas)">
      <summary>
            Get the path from which this atlas was loaded.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.GetDataPaths(Monocle.Atlas)">
      <summary>
            If the atlas was loaded with FromMultiAtlas, get the paths from which this atlas was loaded.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.GetDataFormat(Monocle.Atlas)">
      <summary>
            Get the atlas data format, or none in case of directory atlases.
            </summary>
    </member>
    <member name="M:Monocle.AtlasExt.Ingest(Monocle.Atlas,Celeste.Mod.ModAsset)">
      <summary>
            Feed the given ModAsset into the atlas.
            </summary>
    </member>
    <member name="F:Monocle.Coroutine.ForceDelayedSwap">
      <summary>
            Force this coroutine to mimic vanilla behavior:<br />
            When yield returning a new IEnumerator or when a previously IEnumerator finishes,
            the next IEnumerator runs delayed by one frame.<br /><br />
            To describe the behavior of this field, imagine the following code replacing all yield returns of IEnumerators:<br /><code>
            IEnumerator next = Nested(...);<br />
            if (ForceDelayedSwap ?? vanilla) yield return null;<br />
            while (next.MoveNext()) yield return next.Current;<br />
            if (ForceDelayedSwap ?? vanilla) yield return null;<br />
            // Control is returned to your code here.<br /></code></summary>
    </member>
    <member name="M:Monocle.Coroutine.Jump">
      <summary>
            Forcibly set the timer to 0 to jump to the next "step."
            </summary>
    </member>
    <member name="M:Monocle.CoroutineExt.Jump(Monocle.Coroutine)">
      <inheritdoc cref="M:Monocle.Coroutine.Jump" />
    </member>
    <member name="P:Monocle.Engine.NextScene">
      <summary>
            Allows to check which scene is next in methods like Entity.SceneEnd() or Scene.End().
            </summary>
    </member>
    <member name="P:Monocle.EntityList.ToAdd">
      <summary>
            The list of entities which are about to get added.
            </summary>
    </member>
    <member name="M:Monocle.EntityListExt.GetToAdd(Monocle.EntityList)">
      <summary>
            Get the list of entities which are about to get added.
            </summary>
    </member>
    <member name="M:Monocle.MTexture.SetOverride(Monocle.VirtualTexture,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
      <summary>
            Override the given MTexutre with the given VirtualTexture and parameters.
            </summary>
    </member>
    <member name="M:Monocle.MTexture.SetOverride(Celeste.Mod.ModAsset)">
      <summary>
            Override the given MTexutre with the given mod asset.
            </summary>
    </member>
    <member name="M:Monocle.MTexture.UndoOverride">
      <summary>
            Undo the latest override applied to the given MTexture.
            </summary>
    </member>
    <member name="M:Monocle.MTexture.UndoOverride(Celeste.Mod.ModAsset)">
      <summary>
            Undo the given override applied to the given MTexture.
            </summary>
    </member>
    <member name="M:Monocle.MTextureExt.SetOverride(Monocle.MTexture,Monocle.VirtualTexture,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
      <inheritdoc cref="M:Monocle.MTexture.SetOverride(Monocle.VirtualTexture,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)" />
    </member>
    <member name="M:Monocle.MTextureExt.SetOverride(Monocle.MTexture,Celeste.Mod.ModAsset)">
      <inheritdoc cref="M:Monocle.MTexture.SetOverride(Celeste.Mod.ModAsset)" />
    </member>
    <member name="M:Monocle.MTextureExt.UndoOverride(Monocle.MTexture)">
      <inheritdoc cref="M:Monocle.MTexture.UndoOverride" />
    </member>
    <member name="M:Monocle.MTextureExt.UndoOverride(Monocle.MTexture,Celeste.Mod.ModAsset)">
      <inheritdoc cref="M:Monocle.MTexture.UndoOverride(Celeste.Mod.ModAsset)" />
    </member>
    <member name="M:Monocle.MTextureExt.GetParent(Monocle.MTexture)">
      <summary>
            Gets the parent texture of the given MTexture.
            </summary>
    </member>
    <member name="M:Monocle.MTextureExt.SetParent(Monocle.MTexture,Monocle.MTexture)">
      <summary>
            Sets the parent texture of the given MTexture.
            </summary>
    </member>
    <member name="M:Monocle.RendererListExt.UpdateLists(Monocle.RendererList)">
      <summary>
            Update the renderer lists - apply any pending additions or removals.
            </summary>
    </member>
    <member name="F:Monocle.SpriteBank.XMLPath">
      <summary>
            The path to the file from which the SpriteBank was loaded.
            </summary>
    </member>
    <member name="M:Monocle.SpriteBank.LoadSpriteBank(System.String)">
      <summary>
            Load SpriteBank from file and merge mod SpriteBanks.
            </summary>
      <param name="filename">Xml file to load</param>
      <returns />
    </member>
    <member name="M:Monocle.SpriteBank.GetSpriteBankExcludingVanillaCopyPastes(System.Xml.XmlDocument,System.Xml.XmlDocument,System.String)">
      <summary>
            Returns a mod SpriteBank with all sprites copy-pasted and unmodified from the vanilla SpriteBank filtered out.
            This allows to minimize mod conflicts.
            </summary>
      <param name="vanillaSpritesXml">The content of the vanilla SpriteBank</param>
      <param name="modSpritesXml">The content of the mod SpriteBank</param>
      <param name="path">The path to the SpriteBank file, for logging</param>
      <returns>The mod SpriteBank with all sprites identical to vanilla filtered out.</returns>
    </member>
    <member name="M:Monocle.SpriteBank.xmlNodesAreIdentical(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
            Checks if the 2 given nodes are identical (same attributes and same child elements).
            </summary>
      <param name="node1">The first node to compare</param>
      <param name="node2">The second node to compare</param>
      <returns>true if the nodes match up, false otherwise.</returns>
    </member>
    <member name="M:Monocle.SpriteBank.getChildElements(System.Xml.XmlNode)">
      <summary>
            Gets a list of child <b>elements</b> (excluding comments, text, etc) for the given node.
            </summary>
      <param name="node">The node to get the children from</param>
      <returns>The list of child elements</returns>
    </member>
    <member name="M:Monocle.SpriteBankExt.GetXMLPath(Monocle.SpriteBank)">
      <summary>
            Get the path to the file from which the SpriteBank was loaded.
            </summary>
    </member>
    <member name="T:Monocle.TrackedAsAttribute">
      <summary>
            When applied on an entity or component, this attribute makes the entity tracked the same way as another entity or component.
            </summary>
    </member>
    <member name="M:Monocle.TrackedAsAttribute.#ctor(System.Type)">
      <summary>
            Makes this entity/component tracked the same way as another entity/component.<br />
            It can then be accessed through <see cref="M:Monocle.Tracker.GetEntities``1" /> or <see cref="M:Monocle.Tracker.GetComponents``1" /> with the generic param of <paramref name="trackedAsType" />.
            </summary>
      <param name="trackedAsType">Type to track this entity/component as.</param>
    </member>
    <member name="M:Monocle.TrackedAsAttribute.#ctor(System.Type,System.Boolean)">
      <inheritdoc cref="M:Monocle.TrackedAsAttribute.#ctor(System.Type)" />
      <param name="trackedAsType">Type to track this entity/component as.</param>
      <param name="inherited">Whether all child classes should also be tracked as <paramref name="trackedAsType" />.</param>
    </member>
    <member name="M:Monocle.VirtualAssetExt.Unload(Monocle.VirtualAsset)">
      <summary>
            Unloads a virtual asset without removing it from the virtual asset list.
            </summary>
      <param name="self">The asset to unload.</param>
    </member>
    <member name="M:Monocle.VirtualAssetExt.Reload(Monocle.VirtualAsset)">
      <summary>
            Reloads a single virtual asset.
            </summary>
      <param name="self">The asset to reload.</param>
    </member>
    <member name="P:Monocle.VirtualContent.Assets">
      <summary>
            The list of all managed VirtualAssets.
            </summary>
    </member>
    <member name="M:Monocle.VirtualContent.CreateTexture(Celeste.Mod.ModAsset)">
      <summary>
            Create a new VirtualTexture based on the passed mod asset.
            </summary>
    </member>
    <member name="M:Monocle.VirtualContent.ForceReload">
      <summary>
            Forcibly unload and reload all content.
            </summary>
    </member>
    <member name="M:Monocle.VirtualContent.UnloadOverworld">
      <summary>
            Unload all overworld-related content.
            </summary>
    </member>
    <member name="P:Monocle.VirtualContentExt.Assets">
      <inheritdoc cref="P:Monocle.VirtualContent.Assets" />
    </member>
    <member name="M:Monocle.VirtualContentExt.CreateTexture(Celeste.Mod.ModAsset)">
      <inheritdoc cref="M:Monocle.VirtualContent.CreateTexture(Celeste.Mod.ModAsset)" />
    </member>
    <member name="M:Monocle.VirtualContentExt.Reload">
      <summary>
            Reload all content.
            </summary>
    </member>
    <member name="M:Monocle.VirtualContentExt.Unload">
      <summary>
            Unload all content.
            </summary>
    </member>
    <member name="M:Monocle.VirtualContentExt.ForceReload">
      <inheritdoc cref="M:Monocle.VirtualContent.ForceReload" />
    </member>
    <member name="M:Monocle.VirtualContentExt.UnloadOverworld">
      <inheritdoc cref="M:Monocle.VirtualContent.UnloadOverworld" />
    </member>
    <member name="M:Monocle.VirtualTextureExt.GetMetadata(Monocle.VirtualTexture)">
      <summary>
            If the VirtualTexture originates from a mod, get the mod asset metadata.
            </summary>
    </member>
    <member name="M:Monocle.VirtualTextureExt.SetFallback(Monocle.VirtualTexture,Monocle.VirtualTexture)">
      <summary>
            Set a fallback texture in case the texture becomes unavailable on reload.
            </summary>
    </member>
  </members>
</doc>